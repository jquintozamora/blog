<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>José Quinto</title>
    <link>https://blog.josequinto.com/</link>
    <atom:link href="/feed.rss" rel="self" type="application/rss+xml"/>
    
    <description>I am a software engineer focused on web development and open-source contributor.</description>
    <pubDate>Tue, 27 Oct 2020 08:12:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Git: sync your fork with the original repo</title>
      <link>https://blog.josequinto.com/2020/04/04/git-sync-your-fork-with-original-repo/</link>
      <guid>https://blog.josequinto.com/2020/04/04/git-sync-your-fork-with-original-repo/</guid>
      <pubDate>Sat, 04 Apr 2020 07:00:00 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;When collaborating with github projects, normally, you do your changes in your fork / branch and then push these changes to your origin ( and  when you create a PR it should automatically point to original repo master ). Recently I started collaborating with a github project called &lt;a href=&quot;https://github.com/excalidraw/excalidraw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;excalidraw&lt;/a&gt; and they use that approach. Even if that sounds a easy thing to do, it is not, specially new developers could struggle to get sync done for first time.&lt;/p&gt;
&lt;h2 id=&quot;Sync-Fork-with-Original-Repo&quot;&gt;&lt;a href=&quot;#Sync-Fork-with-Original-Repo&quot; class=&quot;headerlink&quot; title=&quot;Sync Fork with Original Repo&quot;&gt;&lt;/a&gt;Sync Fork with Original Repo&lt;/h2&gt;&lt;p&gt;Best and quicker approach to sync your repo is:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./sync-fork.png&quot; alt=&quot;diagram sync fork&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let’s explain the approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Configure &lt;code&gt;upstream&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We should have &lt;code&gt;origin: &amp;lt;our fork url&amp;gt;&lt;/code&gt; and &lt;code&gt;upstream: &amp;lt;original repo url&amp;gt;&lt;/code&gt;. If we don’t have &lt;code&gt;upstream&lt;/code&gt; configured then we should add it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight console&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git remote -v&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin	https://github.com/jquintozamora/excalidraw.git (fetch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin	https://github.com/jquintozamora/excalidraw.git (push)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git remote add upstream https://github.com/excalidraw/excalidraw.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git remote -v&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin	https://github.com/jquintozamora/excalidraw.git (fetch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origin	https://github.com/jquintozamora/excalidraw.git (push)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;upstream	https://github.com/excalidraw/excalidraw.git (fetch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;upstream	https://github.com/excalidraw/excalidraw.git (push)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We should now see both &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;upstream&lt;/code&gt; setup properly done.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; changes from original repo ( upstream ) ⬇️&lt;/p&gt;
&lt;figure class=&quot;highlight console&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git fetch upstream -ap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remote: Enumerating objects: 286, done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remote: Counting objects: 100% (286/286), done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remote: Compressing objects: 100% (66/66), done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remote: Total 322 (delta 249), reused 241 (delta 220), pack-reused 36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Receiving objects: 100% (322/322), 125.10 KiB | 1.03 MiB/s, done.&lt;/span&gt;&lt;br&gt;&lt;span
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>When collaborating with github projects, normally, you do your changes in your fork / branch and then push these changes to your origin ( and  when you create a PR it should automatically point to original repo master ). Recently I started collaborating with a github project called <a href="https://github.com/excalidraw/excalidraw" target="_blank" rel="noopener">excalidraw</a> and they use that approach. Even if that sounds a easy thing to do, it is not, specially new developers could struggle to get sync done for first time.</p><h2 id="Sync-Fork-with-Original-Repo"><a href="#Sync-Fork-with-Original-Repo" class="headerlink" title="Sync Fork with Original Repo"></a>Sync Fork with Original Repo</h2><p>Best and quicker approach to sync your repo is:</p><p><img src="./sync-fork.png" alt="diagram sync fork"></p><p>Let’s explain the approach:</p><ol><li><p>Configure <code>upstream</code></p><blockquote><p>We should have <code>origin: &lt;our fork url&gt;</code> and <code>upstream: &lt;original repo url&gt;</code>. If we don’t have <code>upstream</code> configured then we should add it.</p></blockquote><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"></span><br><span class="line">originhttps://github.com/jquintozamora/excalidraw.git (fetch)</span><br><span class="line">originhttps://github.com/jquintozamora/excalidraw.git (push)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add upstream https://github.com/excalidraw/excalidraw.git</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"></span><br><span class="line">originhttps://github.com/jquintozamora/excalidraw.git (fetch)</span><br><span class="line">originhttps://github.com/jquintozamora/excalidraw.git (push)</span><br><span class="line">upstreamhttps://github.com/excalidraw/excalidraw.git (fetch)</span><br><span class="line">upstreamhttps://github.com/excalidraw/excalidraw.git (push)</span><br></pre></td></tr></table></figure><p>We should now see both <code>origin</code> and <code>upstream</code> setup properly done.</p></li><li><p><code>fetch</code> changes from original repo ( upstream ) ⬇️</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch upstream -ap</span></span><br><span class="line"></span><br><span class="line">remote: Enumerating objects: 286, done.</span><br><span class="line">remote: Counting objects: 100% (286/286), done.</span><br><span class="line">remote: Compressing objects: 100% (66/66), done.</span><br><span class="line">remote: Total 322 (delta 249), reused 241 (delta 220), pack-reused 36</span><br><span class="line">Receiving objects: 100% (322/322), 125.10 KiB | 1.03 MiB/s, done.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p><code>merge</code> changes from upstream into your fork 🔄</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge upstream/master</span></span><br><span class="line"></span><br><span class="line">Updating 6635261..ae1eee1</span><br><span class="line">Fast-forward</span><br><span class="line">changes...</span><br></pre></td></tr></table></figure><p>After merge, we will have both repos on sync on our local machine. But, I’d recommend to push changes to have your fork updated on github too.</p></li><li><p><code>push</code> to sync changes on github too ⬆️</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br><span class="line"></span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/jquintozamora/excalidraw.git</span><br><span class="line">  6635261..ae1eee1  master -&gt; master</span><br></pre></td></tr></table></figure></li></ol><p>🚀🚀 DONE 🚀🚀</p><p>I hope it works for you as well, if have any issues, please leave a comment, so we can discuss and try to help!</p>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2020/04/04/git-sync-your-fork-with-original-repo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>My experience as Oxford Artificial Intelligence Programme 2019 student</title>
      <link>https://blog.josequinto.com/2019/07/24/ai-said-business-oxford-university-programme-2019/</link>
      <guid>https://blog.josequinto.com/2019/07/24/ai-said-business-oxford-university-programme-2019/</guid>
      <pubDate>Wed, 24 Jul 2019 17:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;One of my &lt;strong&gt;professional goals for 2019&lt;/strong&gt; was to study something related with &lt;strong&gt;Artificial Intelligence (AI)&lt;/strong&gt;. 🤖&lt;/p&gt;
&lt;p&gt;As part of my innovation skills &lt;strong&gt;I already have knowledge and expertise designing and implementing voice apps and bots&lt;/strong&gt; 🗣 ( which is another type of AI), but I wanted to learn also &lt;strong&gt;Machine Learning and Deep Learning&lt;/strong&gt;. 🤪&lt;/p&gt;
&lt;p&gt;During my search for something to study in an online manner, an advertisement came up with &lt;a href=&quot;https://www.sbs.ox.ac.uk/programmes/oxford-artificial-intelligence-programme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oxford Artificial intelligence Programme 2019&lt;/a&gt; and that was ideal for me because allowed me study online but also comes from a high recognized University and Business School: &lt;a href=&quot;https://www.sbs.ox.ac.uk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oxford Saïd&lt;/a&gt; 🔝. So, exciting times, I decided to &lt;em&gt;invest&lt;/em&gt; in my skills and enroll into that programme.&lt;/p&gt;
&lt;h2 id=&quot;Programme-curriculum&quot;&gt;&lt;a href=&quot;#Programme-curriculum&quot; class=&quot;headerlink&quot; title=&quot;Programme curriculum&quot;&gt;&lt;/a&gt;Programme curriculum&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Module 1&lt;/strong&gt;: Artificial intelligence: What is all the hype about?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Explore the history and potential of AI within the context of the digital ecosystem.&lt;/li&gt;
&lt;li&gt;Different AI definitions&lt;/li&gt;
&lt;li&gt;The timeline of AI&lt;/li&gt;
&lt;li&gt;State of the Art in AI Applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Module 2&lt;/strong&gt;: AI’s engine room: How do machines learn from data?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What is Machine Learning? &lt;/li&gt;
&lt;li&gt;Types of machine learning: supervised, reinforcement, and unsupervised learning.&lt;/li&gt;
&lt;li&gt;Regression, Classification, Clustering and Decision&lt;/li&gt;
&lt;li&gt;Types of data and Data Quality&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Module 3&lt;/strong&gt;: Current frontiers: Deep learning and the latest trends in AI&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Understand what deep learning is and how it is powering the modern approach to AI.&lt;/li&gt;
&lt;li&gt;Artificial Neural Networks&lt;/li&gt;
&lt;li&gt;Forward Propagation&lt;/li&gt;
&lt;li&gt;Backpropagation&lt;/li&gt;
&lt;li&gt;Applications of Neural Networks and deep learning&lt;/li&gt;
&lt;li&gt;Success cases and examples&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Module 4&lt;/strong&gt;: Working with intelligent machines&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Explore the concept of intelligence in machines &lt;/li&gt;
&lt;li&gt;Different forms of Intelligence&lt;/li&gt;
&lt;li&gt;The impact of AI in the labour market.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Module 5&lt;/strong&gt;: Setting the boundaries of AI&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Explore the hierarchy of ethical and legal considerations around AI.&lt;/li&gt;
&lt;li&gt;Boundaries of AI&lt;/li&gt;
&lt;li&gt;Law and AI&lt;/li&gt;
&lt;li&gt;Ethics and AI&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Module 6&lt;/strong&gt;: Making a business case for AI&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Identify the potential business opportunities of AI in a specific context.&lt;/li&gt;
&lt;li&gt;AI Business Cases&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;The-approach-and-graduation-process&quot;&gt;&lt;a href=&quot;#The-approach-and-graduation-process&quot; class=&quot;headerlink&quot; title=&quot;The approach and graduation process&quot;&gt;&lt;/a&gt;The approach and graduation process&lt;/h2&gt;&lt;p&gt;In my opinion, one of the &lt;strong&gt;challenges&lt;/strong&gt; for success on the programme is the fact that most of students are &lt;strong&gt;working and studying at the same time&lt;/strong&gt;, so the combination of &lt;strong&gt;flexibility&lt;/strong&gt; and also &lt;strong&gt;achievable deadlines&lt;/strong&gt; is important. Also a good structure in terms of independent units for every module. 👍
In terms of approach, I liked the approach of having &lt;strong&gt;graded activities at the end of each module&lt;/strong&gt;. Also, I liked having a &lt;strong&gt;forum platform in which all students discuss further any topics&lt;/strong&gt; and share different experiences in different sectors.
In terms of professors, I liked the &lt;strong&gt;professors were actively involved&lt;/strong&gt; in our discussions and gave proactive feedback after every module.
I’d definitely
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>One of my <strong>professional goals for 2019</strong> was to study something related with <strong>Artificial Intelligence (AI)</strong>. 🤖</p><p>As part of my innovation skills <strong>I already have knowledge and expertise designing and implementing voice apps and bots</strong> 🗣 ( which is another type of AI), but I wanted to learn also <strong>Machine Learning and Deep Learning</strong>. 🤪</p><p>During my search for something to study in an online manner, an advertisement came up with <a href="https://www.sbs.ox.ac.uk/programmes/oxford-artificial-intelligence-programme" target="_blank" rel="noopener">Oxford Artificial intelligence Programme 2019</a> and that was ideal for me because allowed me study online but also comes from a high recognized University and Business School: <a href="https://www.sbs.ox.ac.uk/" target="_blank" rel="noopener">Oxford Saïd</a> 🔝. So, exciting times, I decided to <em>invest</em> in my skills and enroll into that programme.</p><h2 id="Programme-curriculum"><a href="#Programme-curriculum" class="headerlink" title="Programme curriculum"></a>Programme curriculum</h2><ul><li><p><strong>Module 1</strong>: Artificial intelligence: What is all the hype about?</p><blockquote><ul><li>Explore the history and potential of AI within the context of the digital ecosystem.</li><li>Different AI definitions</li><li>The timeline of AI</li><li>State of the Art in AI Applications</li></ul></blockquote></li><li><p><strong>Module 2</strong>: AI’s engine room: How do machines learn from data?</p><blockquote><ul><li>What is Machine Learning? </li><li>Types of machine learning: supervised, reinforcement, and unsupervised learning.</li><li>Regression, Classification, Clustering and Decision</li><li>Types of data and Data Quality</li></ul></blockquote></li><li><p><strong>Module 3</strong>: Current frontiers: Deep learning and the latest trends in AI</p><blockquote><ul><li>Understand what deep learning is and how it is powering the modern approach to AI.</li><li>Artificial Neural Networks</li><li>Forward Propagation</li><li>Backpropagation</li><li>Applications of Neural Networks and deep learning</li><li>Success cases and examples</li></ul></blockquote></li><li><p><strong>Module 4</strong>: Working with intelligent machines</p><blockquote><ul><li>Explore the concept of intelligence in machines </li><li>Different forms of Intelligence</li><li>The impact of AI in the labour market.</li></ul></blockquote></li><li><p><strong>Module 5</strong>: Setting the boundaries of AI</p><blockquote><ul><li>Explore the hierarchy of ethical and legal considerations around AI.</li><li>Boundaries of AI</li><li>Law and AI</li><li>Ethics and AI</li></ul></blockquote></li><li><p><strong>Module 6</strong>: Making a business case for AI</p><blockquote><ul><li>Identify the potential business opportunities of AI in a specific context.</li><li>AI Business Cases</li></ul></blockquote></li></ul><h2 id="The-approach-and-graduation-process"><a href="#The-approach-and-graduation-process" class="headerlink" title="The approach and graduation process"></a>The approach and graduation process</h2><p>In my opinion, one of the <strong>challenges</strong> for success on the programme is the fact that most of students are <strong>working and studying at the same time</strong>, so the combination of <strong>flexibility</strong> and also <strong>achievable deadlines</strong> is important. Also a good structure in terms of independent units for every module. 👍In terms of approach, I liked the approach of having <strong>graded activities at the end of each module</strong>. Also, I liked having a <strong>forum platform in which all students discuss further any topics</strong> and share different experiences in different sectors.In terms of professors, I liked the <strong>professors were actively involved</strong> in our discussions and gave proactive feedback after every module.I’d definitely recommend that / or similar online programmes.</p><h2 id="Final-Grades"><a href="#Final-Grades" class="headerlink" title="Final Grades"></a>Final Grades</h2><p>I <strong>completed</strong> the program in <strong>July 2019</strong> 👨🏻‍💻 with a score of <strong>81 out of 100</strong> 🤓, I am proud of it due to the high average level in the class. 🚀</p><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>After that course of AI and ML, <strong>I do have a better overall on Machine Learning and its applications in real life</strong>.</p><p>My next steps towards AI skills are potentially: <strong>advanced Machine Learning course</strong> and <strong>side projects to grown my ML skills</strong>. 💪🏻🤖</p>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2019/07/24/ai-said-business-oxford-university-programme-2019/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Alexa, certify me on Skill Building</title>
      <link>https://blog.josequinto.com/2019/04/18/aws-certified-alexa-skill-builder/</link>
      <guid>https://blog.josequinto.com/2019/04/18/aws-certified-alexa-skill-builder/</guid>
      <pubDate>Thu, 18 Apr 2019 17:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;Back in January 2019, &lt;strong&gt;Amazon&lt;/strong&gt; launched beta exams for &lt;strong&gt;AWS Certification Alexa Skill Builder - Specialty&lt;/strong&gt;. Then I signed up to keep up my Alexa Skills knowledge. Previously, I worked designing and implementing the &lt;a href=&quot;https://www.amazon.co.uk/Eurostar/dp/B07K8RVXF7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eurostar Skill for Alexa&lt;/a&gt; during 6 months as par of the &lt;strong&gt;Innovation Team&lt;/strong&gt; at &lt;strong&gt;Eurostar&lt;/strong&gt;. It was quite intense project and at the same time exciting to work in that new technology in collaboration with Amazon Team in London. I learnt a lot, so I was looking forward to put all that learning into a certification. &lt;/p&gt;
&lt;p&gt;Today, I’ve received an email from Amazon with the good news! &lt;/p&gt;
&lt;p&gt;I’m happy to announce I’ve become &lt;code&gt;AWS Alexa Skill Builder Certified&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;./AWS-Certified-Alexa-Skill-Builder-Specialty.pdf&quot;&gt;Download
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Back in January 2019, <strong>Amazon</strong> launched beta exams for <strong>AWS Certification Alexa Skill Builder - Specialty</strong>. Then I signed up to keep up my Alexa Skills knowledge. Previously, I worked designing and implementing the <a href="https://www.amazon.co.uk/Eurostar/dp/B07K8RVXF7" target="_blank" rel="noopener">Eurostar Skill for Alexa</a> during 6 months as par of the <strong>Innovation Team</strong> at <strong>Eurostar</strong>. It was quite intense project and at the same time exciting to work in that new technology in collaboration with Amazon Team in London. I learnt a lot, so I was looking forward to put all that learning into a certification. </p><p>Today, I’ve received an email from Amazon with the good news! </p><p>I’m happy to announce I’ve become <code>AWS Alexa Skill Builder Certified</code>!</p><p><a href="./AWS-Certified-Alexa-Skill-Builder-Specialty.pdf">Download Certification</a></p>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2019/04/18/aws-certified-alexa-skill-builder/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Wrapping up 2018</title>
      <link>https://blog.josequinto.com/2019/02/24/wrapping-up-2018/</link>
      <guid>https://blog.josequinto.com/2019/02/24/wrapping-up-2018/</guid>
      <pubDate>Sun, 24 Feb 2019 18:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;I started 2018 working for &lt;strong&gt;Arcadia Group&lt;/strong&gt; in London as a &lt;strong&gt;React Developer&lt;/strong&gt;, there I met lot of smart colleagues and friends working hard on the &lt;code&gt;isomorphic React&lt;/code&gt; Application within the &lt;code&gt;Catalogue Team&lt;/code&gt;. We were working following strictly scrum methodology (Planning, Refinement, Standups, 3 Amigos, Retrospective). In terms of tech stack, I learned a lot, while I created new &lt;code&gt;React reusable components&lt;/code&gt;, &lt;code&gt;redux actions&lt;/code&gt; and &lt;code&gt;reducers&lt;/code&gt;. Also, I spent lof of time creating &lt;code&gt;Unit Test&lt;/code&gt; with &lt;code&gt;Jest&lt;/code&gt; and &lt;code&gt;Enzyme&lt;/code&gt; (&lt;code&gt;redux-mock-store&lt;/code&gt;, &lt;code&gt;snapshots&lt;/code&gt;, &lt;code&gt;jest.mock&lt;/code&gt;, &lt;code&gt;jest.fn&lt;/code&gt;, &lt;code&gt;jest.spyOn&lt;/code&gt;, and so on). 
Eventually, after 8 months, I left Arcadia Group to begin another kind of professional trip, becoming &lt;strong&gt;contractor in London&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Then I closed my eyes and make myself comfortable with different kind of interviews and recruiter agents. It was harder than I expected but eventually I got my first contract as a Senior JavaScript Full Stack Software Engineer at &lt;strong&gt;Eurostar&lt;/strong&gt;. I appreciate the opportunity I was given here starting my new role as in the &lt;strong&gt;Innovation Team&lt;/strong&gt;. The methodology was quite different as per the nature of the team we don’t follow strict Agile Scrum, instead, we do follow Kanban approach ( weekly planning, standups, demo fridays, jira board, and so on). In terms of tech stack, I started solving some bugs for some of the &lt;strong&gt;microservices&lt;/strong&gt; using &lt;code&gt;JavaScript&lt;/code&gt; and &lt;code&gt;NodeJS&lt;/code&gt; (&lt;code&gt;AWS&lt;/code&gt;, &lt;code&gt;SQS&lt;/code&gt;, &lt;code&gt;SNS&lt;/code&gt;, &lt;code&gt;Queue Consumer&lt;/code&gt;) and I learnt new things like AWS ( I used Azure until then ), &lt;code&gt;CircleCI&lt;/code&gt;, &lt;code&gt;Terraform&lt;/code&gt;, &lt;code&gt;Microservices Architecture&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;After few months I then joined to a new challenge to build the &lt;code&gt;Alexa Eurostar Skill&lt;/code&gt;. That started as a POC being a conversational ad-hoc script which I prepared in a week for a show and tell presentation. Initially, I was quite confused about the scope for that POC but after the good result of the POC, &lt;code&gt;Eurostar&lt;/code&gt; decided to build a Team around that skill and then we end up being a team of 2 developers, 1 voice ux, 1 product owner and 1 scrum manager, I really liked the new shape for that, and even if I was quite sceptical at the begining, eventually, I started believing in voice systems!! Crazy and exciting days, isn’t it? 🚀 &lt;/p&gt;
&lt;p&gt;We started to take that project really seriously and start doing lots of research in order to become one of the first doing things right with &lt;code&gt;Alexa Skill Development&lt;/code&gt;. I event took the time to write down several posts with our investigations and results. 
From our Alexa Skill project we started small different sub-projects following the proper microservices infrastructure we have at Eurostar. I can mention some of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alexa Skill&lt;/code&gt;: That is a project intended to design, develop, continuously integrate and deploy our skill in Lambda function and Alexa Development Console (ASK). Among others we used:&lt;ul&gt;
&lt;li&gt;ASK CLI&lt;/li&gt;
&lt;li&gt;AWS SDK&lt;/li&gt;
&lt;li&gt;AWS CLI&lt;/li&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;li&gt;Intent Debugger ( custom )&lt;/li&gt;
&lt;li&gt;Github / Alexa Dev Console / AWS Lambda integration and synch scripts&lt;/li&gt;
&lt;li&gt;date-fns&lt;/li&gt;
&lt;li&gt;axios&lt;/li&gt;
&lt;li&gt;Apollo Client&lt;/li&gt;
&lt;li&gt;Fallback Intent&lt;/li&gt;
&lt;li&gt;Yes / No Custom Slot&lt;/li&gt;
&lt;li&gt;Custom Slots for Stations&lt;/li&gt;
&lt;li&gt;SearchQuery Slot Type&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Voice BFF&lt;/code&gt;: We built a backend for frontend layer in order to communicate with our Internal and External APIs. Among others we used that stack:&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Express&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;li&gt;Apollo Server 2&lt;/li&gt;
&lt;li&gt;Babel&lt;/li&gt;
&lt;li&gt;Docker ( for Integration Tests )&lt;/li&gt;
&lt;li&gt;mockttp ( for creating stubs for external APIs )&lt;/li&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Voice NER&lt;/code&gt;: We
          
        
      
      </description>
      
      <content:encoded><![CDATA[<p>I started 2018 working for <strong>Arcadia Group</strong> in London as a <strong>React Developer</strong>, there I met lot of smart colleagues and friends working hard on the <code>isomorphic React</code> Application within the <code>Catalogue Team</code>. We were working following strictly scrum methodology (Planning, Refinement, Standups, 3 Amigos, Retrospective). In terms of tech stack, I learned a lot, while I created new <code>React reusable components</code>, <code>redux actions</code> and <code>reducers</code>. Also, I spent lof of time creating <code>Unit Test</code> with <code>Jest</code> and <code>Enzyme</code> (<code>redux-mock-store</code>, <code>snapshots</code>, <code>jest.mock</code>, <code>jest.fn</code>, <code>jest.spyOn</code>, and so on). Eventually, after 8 months, I left Arcadia Group to begin another kind of professional trip, becoming <strong>contractor in London</strong>!</p><p>Then I closed my eyes and make myself comfortable with different kind of interviews and recruiter agents. It was harder than I expected but eventually I got my first contract as a Senior JavaScript Full Stack Software Engineer at <strong>Eurostar</strong>. I appreciate the opportunity I was given here starting my new role as in the <strong>Innovation Team</strong>. The methodology was quite different as per the nature of the team we don’t follow strict Agile Scrum, instead, we do follow Kanban approach ( weekly planning, standups, demo fridays, jira board, and so on). In terms of tech stack, I started solving some bugs for some of the <strong>microservices</strong> using <code>JavaScript</code> and <code>NodeJS</code> (<code>AWS</code>, <code>SQS</code>, <code>SNS</code>, <code>Queue Consumer</code>) and I learnt new things like AWS ( I used Azure until then ), <code>CircleCI</code>, <code>Terraform</code>, <code>Microservices Architecture</code>. </p><p>After few months I then joined to a new challenge to build the <code>Alexa Eurostar Skill</code>. That started as a POC being a conversational ad-hoc script which I prepared in a week for a show and tell presentation. Initially, I was quite confused about the scope for that POC but after the good result of the POC, <code>Eurostar</code> decided to build a Team around that skill and then we end up being a team of 2 developers, 1 voice ux, 1 product owner and 1 scrum manager, I really liked the new shape for that, and even if I was quite sceptical at the begining, eventually, I started believing in voice systems!! Crazy and exciting days, isn’t it? 🚀 </p><p>We started to take that project really seriously and start doing lots of research in order to become one of the first doing things right with <code>Alexa Skill Development</code>. I event took the time to write down several posts with our investigations and results. From our Alexa Skill project we started small different sub-projects following the proper microservices infrastructure we have at Eurostar. I can mention some of them:</p><ul><li><code>Alexa Skill</code>: That is a project intended to design, develop, continuously integrate and deploy our skill in Lambda function and Alexa Development Console (ASK). Among others we used:<ul><li>ASK CLI</li><li>AWS SDK</li><li>AWS CLI</li><li>NodeJS</li><li>Jest</li><li>Intent Debugger ( custom )</li><li>Github / Alexa Dev Console / AWS Lambda integration and synch scripts</li><li>date-fns</li><li>axios</li><li>Apollo Client</li><li>Fallback Intent</li><li>Yes / No Custom Slot</li><li>Custom Slots for Stations</li><li>SearchQuery Slot Type</li></ul></li><li><code>Voice BFF</code>: We built a backend for frontend layer in order to communicate with our Internal and External APIs. Among others we used that stack:<ul><li>NodeJS</li><li>Express</li><li>GraphQL</li><li>Apollo Server 2</li><li>Babel</li><li>Docker ( for Integration Tests )</li><li>mockttp ( for creating stubs for external APIs )</li><li>Jest</li></ul></li><li><code>Voice NER</code>: We build a project for improving the Name Entity Recognition currently built-in within Alexa, we had different issues with the users being able to make Alexa recognizing certain expressions like ‘in two weeks time’, ‘next month for two days’, and so on. And we decided to create a NER to actually parse the text given by Alexa and extract from there the right dates we needed. We explored and used a combination of different date parses and NERs on the internet:<ul><li>Stratford University NER </li><li>Microsoft NER Library ( npm )</li><li>WatsonJS Date Parser ( npm )</li><li>Our custom parser</li></ul></li></ul><p>You can imagine such a six months we spent investigating, learning and developing all that stuff and finally releasing the [<code>Alexa Eurostar Skill</code>] (<a href="https://www.amazon.co.uk/Eurostar/dp/B07K8RVXF7)" target="_blank" rel="noopener">https://www.amazon.co.uk/Eurostar/dp/B07K8RVXF7)</a>. Which is not only Certified and Publish by Amazon in the Skill Market Store, but also being tested by real users in a bunch of user testing sessions our Voice UX did which such a passion and energy.It has been a success story in and outside <code>Eurostar</code> and we are going to speak in the next Alexa Developer Meetup in London ( Amazon UK Offices ) and tell the world how we did and our experiences at different levels ( dev, ux and lessons learn ). I also achieved the <code>AWS Certified Alexa Skill Builder</code> title after 3 long hours of beta exam.</p><p>Now, 2019 is going to be a year of fresh project and new challenges. I will be starting in the <code>BPA Team</code> at <code>Eurostar</code> working on the Booking and Checkout area in the <code>eurostar.com</code> website. Exiting times! I’m really looking forward starting that new project in January and doing lots of things in <code>React</code>, <code>Redux</code> and <code>NodeJS</code>.</p><p>Also, after my project developing <code>Amazon Alexa Skill</code>, I do believe 2019 is going to be a great year for voice systems and I will start some side projects creating my own Alexa Skill on my free time!</p>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2019/02/24/wrapping-up-2018/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Configuring permissions to request email access for use in your Alexa Skill</title>
      <link>https://blog.josequinto.com/2018/08/06/configuring-permissions-to-request-email-access-for-use-in-your-skill-alexa/</link>
      <guid>https://blog.josequinto.com/2018/08/06/configuring-permissions-to-request-email-access-for-use-in-your-skill-alexa/</guid>
      <pubDate>Mon, 06 Aug 2018 07:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;When we are &lt;strong&gt;designing and implementing&lt;/strong&gt; a new &lt;strong&gt;Alexa Custom Skill&lt;/strong&gt;, one of the first questions we ask ourselves is whether we have access to &lt;strong&gt;user’s email&lt;/strong&gt; or not. Recently (July 2018), &lt;strong&gt;Amazon Alexa’s Team&lt;/strong&gt; released a new feature to allow Alexa Skill’s Developers to &lt;strong&gt;request users to access resources&lt;/strong&gt; like &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;phone&lt;/code&gt; and &lt;code&gt;customer name&lt;/code&gt;. Until that time, we only were able to request permissions for &lt;code&gt;Device Address&lt;/code&gt; and &lt;code&gt;Lists&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is a blob post from &lt;code&gt;Alexa&amp;#39;s Team&lt;/code&gt; &lt;a href=&quot;https://developer.amazon.com/docs/custom-skills/request-customer-contact-information-for-use-in-your-skill.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;explaining how to request customer contact information&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Account-Linking-vs-Permissions-on-gathering-user’s-email&quot;&gt;&lt;a href=&quot;#Account-Linking-vs-Permissions-on-gathering-user’s-email&quot; class=&quot;headerlink&quot; title=&quot;Account Linking vs Permissions on gathering user’s email&quot;&gt;&lt;/a&gt;Account Linking vs Permissions on gathering user’s email&lt;/h2&gt;&lt;p&gt;Until now, there were &lt;strong&gt;some scenarios like sending detailed information to customers over email&lt;/strong&gt; that &lt;strong&gt;required &lt;code&gt;Account Linking&lt;/code&gt;&lt;/strong&gt; either with &lt;code&gt;Amazon&lt;/code&gt; or &lt;code&gt;Custom Authentication Provider&lt;/code&gt;. But with this &lt;strong&gt;new feature&lt;/strong&gt; if we only do Account Linking to gather the user email, then we &lt;strong&gt;don’t need it anymore&lt;/strong&gt; and we can use this &lt;strong&gt;simpler approach to get permissions from the user and get their email&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Skill-configuration-to-request-customer-permissions&quot;&gt;&lt;a href=&quot;#Skill-configuration-to-request-customer-permissions&quot; class=&quot;headerlink&quot; title=&quot;Skill configuration to request customer permissions.&quot;&gt;&lt;/a&gt;Skill configuration to request customer permissions.&lt;/h2&gt;&lt;p&gt;Using &lt;strong&gt;Amazon Developer Console&lt;/strong&gt; we can manage our skill. Navigate to the &lt;code&gt;Build -&amp;gt; Permissions&lt;/code&gt; page in the console and select &lt;code&gt;Customer Email Address&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./amazon-alexa-skill-permissions.png&quot; alt=&quot;skill permissions&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are using &lt;code&gt;ask-cli&lt;/code&gt; to configure and update your skill then you should add permissions in your &lt;code&gt;skill.json&lt;/code&gt;:
&lt;img src=&quot;./alexa-permissions-ask-cli.png&quot; alt=&quot;skill permissions ask cli&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Get-user’s-email-in-our-code&quot;&gt;&lt;a href=&quot;#Get-user’s-email-in-our-code&quot; class=&quot;headerlink&quot; title=&quot;Get user’s email in our code&quot;&gt;&lt;/a&gt;Get user’s email in our code&lt;/h2&gt;&lt;p&gt;In order to get the email to be used in our code, we have to do query Amazon’s API asking for it and we have to use the field &lt;code&gt;apiAccessToken&lt;/code&gt; provided under &lt;code&gt;context -&amp;gt; System&lt;/code&gt; in our &lt;code&gt;handlerInput&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;apiAccessToken&quot;&gt;&lt;a href=&quot;#apiAccessToken&quot; class=&quot;headerlink&quot; title=&quot;apiAccessToken&quot;&gt;&lt;/a&gt;apiAccessToken&lt;/h2&gt;&lt;p&gt;Before going forward and showing the code, I’d like to share the different scenarios we can have and the different outputs for the property &lt;code&gt;apiAccessToken&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;User denies &lt;code&gt;Email Address&lt;/code&gt; permission
&lt;img src=&quot;./email-permission-denied.png&quot; alt=&quot;skill permissions denied email&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>When we are <strong>designing and implementing</strong> a new <strong>Alexa Custom Skill</strong>, one of the first questions we ask ourselves is whether we have access to <strong>user’s email</strong> or not. Recently (July 2018), <strong>Amazon Alexa’s Team</strong> released a new feature to allow Alexa Skill’s Developers to <strong>request users to access resources</strong> like <code>email</code>, <code>phone</code> and <code>customer name</code>. Until that time, we only were able to request permissions for <code>Device Address</code> and <code>Lists</code>.</p><p>There is a blob post from <code>Alexa&#39;s Team</code> <a href="https://developer.amazon.com/docs/custom-skills/request-customer-contact-information-for-use-in-your-skill.html" target="_blank" rel="noopener">explaining how to request customer contact information</a>.</p><p><br></p><h2 id="Account-Linking-vs-Permissions-on-gathering-user’s-email"><a href="#Account-Linking-vs-Permissions-on-gathering-user’s-email" class="headerlink" title="Account Linking vs Permissions on gathering user’s email"></a>Account Linking vs Permissions on gathering user’s email</h2><p>Until now, there were <strong>some scenarios like sending detailed information to customers over email</strong> that <strong>required <code>Account Linking</code></strong> either with <code>Amazon</code> or <code>Custom Authentication Provider</code>. But with this <strong>new feature</strong> if we only do Account Linking to gather the user email, then we <strong>don’t need it anymore</strong> and we can use this <strong>simpler approach to get permissions from the user and get their email</strong>.</p><p><br></p><h2 id="Skill-configuration-to-request-customer-permissions"><a href="#Skill-configuration-to-request-customer-permissions" class="headerlink" title="Skill configuration to request customer permissions."></a>Skill configuration to request customer permissions.</h2><p>Using <strong>Amazon Developer Console</strong> we can manage our skill. Navigate to the <code>Build -&gt; Permissions</code> page in the console and select <code>Customer Email Address</code>:</p><p><img src="./amazon-alexa-skill-permissions.png" alt="skill permissions"></p><blockquote><p><strong>Note:</strong> If you are using <code>ask-cli</code> to configure and update your skill then you should add permissions in your <code>skill.json</code>:<img src="./alexa-permissions-ask-cli.png" alt="skill permissions ask cli"></p></blockquote><p><br></p><h2 id="Get-user’s-email-in-our-code"><a href="#Get-user’s-email-in-our-code" class="headerlink" title="Get user’s email in our code"></a>Get user’s email in our code</h2><p>In order to get the email to be used in our code, we have to do query Amazon’s API asking for it and we have to use the field <code>apiAccessToken</code> provided under <code>context -&gt; System</code> in our <code>handlerInput</code> object.</p><p><br></p><h2 id="apiAccessToken"><a href="#apiAccessToken" class="headerlink" title="apiAccessToken"></a>apiAccessToken</h2><p>Before going forward and showing the code, I’d like to share the different scenarios we can have and the different outputs for the property <code>apiAccessToken</code>.</p><ol><li><p>User denies <code>Email Address</code> permission<img src="./email-permission-denied.png" alt="skill permissions denied email"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">"context": &#123;</span><br><span class="line">  "System": &#123;</span><br><span class="line">    "application": &#123;</span><br><span class="line">      "applicationId": "amzn1.ask.skill.&lt;skill-id&gt;"</span><br><span class="line">    &#125;,</span><br><span class="line">    "user": &#123;</span><br><span class="line">      "userId": "amzn1.ask.account.&lt;user-id&gt;"</span><br><span class="line">    &#125;,</span><br><span class="line">    "device": &#123;</span><br><span class="line">      "deviceId": "amzn1.ask.device.&lt;device-id&gt;",</span><br><span class="line">      "supportedInterfaces": &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "apiEndpoint": "https://api.amazonalexa.com",</span><br><span class="line">    "apiAccessToken": "eyJ0e....&lt;rest-of-jwt-token&gt;"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that even if we have no permissions added to our skill, we still get <code>apiAccessToken</code> property. If we inspect <code>apiAccessToken</code> JWT token using <a href="https://jwt.io" target="_blank" rel="noopener">https://jwt.io</a>, we can see the below <code>payload data</code> where <code>privateClaims.consentToken</code> is <code>null</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aud"</span>: <span class="string">"https://api.amazonalexa.com"</span>,</span><br><span class="line">  <span class="attr">"iss"</span>: <span class="string">"AlexaSkillKit"</span>,</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"amzn1.ask.skill.&lt;skill-id&gt;"</span>,</span><br><span class="line">  <span class="attr">"exp"</span>: <span class="number">1633532432</span>,</span><br><span class="line">  <span class="attr">"iat"</span>: <span class="number">1633528832</span>,</span><br><span class="line">  <span class="attr">"nbf"</span>: <span class="number">1633528832</span>,</span><br><span class="line">  <span class="attr">"privateClaims"</span>: &#123;</span><br><span class="line">    <span class="attr">"consentToken"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"deviceId"</span>: <span class="string">"amzn1.ask.device.&lt;device-id&gt;"</span>,</span><br><span class="line">    <span class="attr">"userId"</span>: <span class="string">"amzn1.ask.account.&lt;user-id&gt;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>User grants <code>Full Name</code> permission but denies <code>Email Address</code> permission.<img src="./email-permission-denied-name-permission-granted.png" alt="skill permissions denied email granted name"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">"context": &#123;</span><br><span class="line">  "System": &#123;</span><br><span class="line">    "application": &#123;</span><br><span class="line">      "applicationId": "amzn1.ask.skill.&lt;skill-id&gt;"</span><br><span class="line">    &#125;,</span><br><span class="line">    "user": &#123;</span><br><span class="line">      "userId": "amzn1.ask.account.&lt;user-id&gt;",</span><br><span class="line">      "permissions": &#123;</span><br><span class="line">          "consentToken": "eyJ0e...&lt;rest-of-jwt-token&gt;...lFkHDw"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "device": &#123;</span><br><span class="line">      "deviceId": "amzn1.ask.device.&lt;device-id&gt;",</span><br><span class="line">      "supportedInterfaces": &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "apiEndpoint": "https://api.amazonalexa.com",</span><br><span class="line">    "apiAccessToken": "eyJ0e...&lt;rest-of-jwt-token&gt;...rTyOD"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note, apart from having a different <code>apiAccessToken</code>, now we also have a new <code>permissions</code> property under <code>user</code>.Now, if we inspect <code>apiAccessToken</code> using <a href="https://jwt.io" target="_blank" rel="noopener">https://jwt.io</a>, we can see how <code>consentToken</code> is not <code>null</code> because it has permissions for <code>Name</code> included on it. But still if we try to authenticate to Amazon’s API to query for <code>email</code> with that token, it will fail with 403 Forbidden:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aud"</span>: <span class="string">"https://api.amazonalexa.com"</span>,</span><br><span class="line">  <span class="attr">"iss"</span>: <span class="string">"AlexaSkillKit"</span>,</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"amzn1.ask.skill.&lt;skill-id&gt;"</span>,</span><br><span class="line">  <span class="attr">"exp"</span>: <span class="number">1633532432</span>,</span><br><span class="line">  <span class="attr">"iat"</span>: <span class="number">1633528832</span>,</span><br><span class="line">  <span class="attr">"nbf"</span>: <span class="number">1633528832</span>,</span><br><span class="line">  <span class="attr">"privateClaims"</span>: &#123;</span><br><span class="line">    <span class="attr">"consentToken"</span>: <span class="string">"Atza|...&lt;rest-of-amazon-token-authorizing-full-name&gt;..."</span>,</span><br><span class="line">    <span class="attr">"deviceId"</span>: <span class="string">"amzn1.ask.device.&lt;device-id&gt;"</span>,</span><br><span class="line">    <span class="attr">"userId"</span>: <span class="string">"amzn1.ask.account.&lt;user-id&gt;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>User grants <code>Email Address</code> permission</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">"context": &#123;</span><br><span class="line">  "System": &#123;</span><br><span class="line">    "application": &#123;</span><br><span class="line">      "applicationId": "amzn1.ask.skill.&lt;skill-id&gt;"</span><br><span class="line">    &#125;,</span><br><span class="line">    "user": &#123;</span><br><span class="line">      "userId": "amzn1.ask.account.&lt;user-id&gt;",</span><br><span class="line">      "permissions": &#123;</span><br><span class="line">          "consentToken": "eyJ0e...&lt;rest-of-jwt-token&gt;...lFkHDw"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "device": &#123;</span><br><span class="line">      "deviceId": "amzn1.ask.device.&lt;device-id&gt;",</span><br><span class="line">      "supportedInterfaces": &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "apiEndpoint": "https://api.amazonalexa.com",</span><br><span class="line">    "apiAccessToken": "eyJ0e...&lt;rest-of-jwt-token&gt;...rTyOD"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is almost look a like of scenario’s 2 token, the difference is <code>consentToken</code> is different and now it does allow querying for email.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aud"</span>: <span class="string">"https://api.amazonalexa.com"</span>,</span><br><span class="line">  <span class="attr">"iss"</span>: <span class="string">"AlexaSkillKit"</span>,</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"amzn1.ask.skill.&lt;skill-id&gt;"</span>,</span><br><span class="line">  <span class="attr">"exp"</span>: <span class="number">1633532432</span>,</span><br><span class="line">  <span class="attr">"iat"</span>: <span class="number">1633528832</span>,</span><br><span class="line">  <span class="attr">"nbf"</span>: <span class="number">1633528832</span>,</span><br><span class="line">  <span class="attr">"privateClaims"</span>: &#123;</span><br><span class="line">    <span class="attr">"consentToken"</span>: <span class="string">"Atza|...&lt;rest-of-amazon-token-authorizing-email&gt;..."</span>,</span><br><span class="line">    <span class="attr">"deviceId"</span>: <span class="string">"amzn1.ask.device.&lt;device-id&gt;"</span>,</span><br><span class="line">    <span class="attr">"userId"</span>: <span class="string">"amzn1.ask.account.&lt;user-id&gt;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>User grants <code>Email Address</code> permission + User authenticate through <code>Account Linking</code> as wellWe can have <strong>both working together</strong>, <strong>Account Linking + Permissions</strong> for email.The main difference in terms of the <code>handlerInput</code> schema is, we will <code>user.accessToken</code> property which we can use to authenticate and authorize against our <strong>custom Authentication Server</strong>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">"context": &#123;</span><br><span class="line">  "System": &#123;</span><br><span class="line">    "application": &#123;</span><br><span class="line">      "applicationId": "amzn1.ask.skill.&lt;skill-id&gt;"</span><br><span class="line">    &#125;,</span><br><span class="line">    "user": &#123;</span><br><span class="line">      "userId": "amzn1.ask.account.&lt;user-id&gt;",</span><br><span class="line">      "accessToken": "eyJ0...&lt;jwt-account-linking-access-token&gt;...",</span><br><span class="line">      "permissions": &#123;</span><br><span class="line">          "consentToken": "eyJ0e...&lt;rest-of-jwt-token&gt;...lFkHDw"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "device": &#123;</span><br><span class="line">      "deviceId": "amzn1.ask.device.&lt;device-id&gt;",</span><br><span class="line">      "supportedInterfaces": &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "apiEndpoint": "https://api.amazonalexa.com",</span><br><span class="line">    "apiAccessToken": "eyJ0e...&lt;rest-of-jwt-token&gt;...rTyOD"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note that giving permissions and doing account linking are <strong>two separate processes for Alexa Skill</strong>. So, they can be used together or by its own.</p></blockquote></li></ol><p><br></p><h2 id="Calling-Amazon’s-API-to-get-user’s-email"><a href="#Calling-Amazon’s-API-to-get-user’s-email" class="headerlink" title="Calling Amazon’s API to get user’s email"></a>Calling Amazon’s API to get user’s email</h2><p>Finally, after understanding what <code>apiAccessToken</code> does for the different scenarios, let’s put our hands on and actually do the code that will access to Amazon’s API from our intent:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  canHandle(handlerInput) &#123;</span><br><span class="line">    <span class="keyword">const</span> request = handlerInput.requestEnvelope.request;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      request.type === <span class="string">"IntentRequest"</span> &amp;&amp;</span><br><span class="line">      request.intent.name === <span class="string">"MyIntent"</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> handle(handlerInput) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      apiAccessToken,</span><br><span class="line">      apiEndpoint,</span><br><span class="line">      user</span><br><span class="line">    &#125; = handlerInput.requestEnvelope.context.System;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"apiAccessToken: "</span>, apiAccessToken);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"apiEndpoint: "</span>, apiEndpoint);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"userId: "</span>, user.userId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> getEmailUrl = apiEndpoint.concat(</span><br><span class="line">      <span class="string">`/v2/accounts/~current/settings/Profile.email`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getEmailUrl"</span>, getEmailUrl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      result = <span class="keyword">await</span> axios.get(getEmailUrl, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          Accept: <span class="string">"application/json"</span>,</span><br><span class="line">          Authorization: <span class="string">"Bearer "</span> + apiAccessToken</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> email = result &amp;&amp; result.data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handlerInput.responseBuilder</span><br><span class="line">      .speak(<span class="string">"Your email is: "</span> + email)</span><br><span class="line">      .getResponse();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h2><ul><li>We can use either <strong>Amazon Development Console</strong> or <strong>ASK CLI</strong> to request access for <code>Email</code> permissions to our users.</li><li><strong>Account Linking</strong> and <strong>Permissions</strong> are independent features and they can be used <strong>together or separately</strong>.</li><li>Depending on the <strong>configuration and the user input</strong> we will have different outputs on <code>apiAccessToken</code>.</li><li>Accessing to user’s <code>email</code> will require to call Amazon’s API with <code>apiAccessToken</code> as a Authentication <strong>Bearer</strong> header.</li></ul><p><br></p>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2018/08/06/configuring-permissions-to-request-email-access-for-use-in-your-skill-alexa/#disqus_thread</comments>
    </item>
    
    <item>
      <title>How to architecture and implement Integration Tests for GraphQL BFF API using docker</title>
      <link>https://blog.josequinto.com/2018/07/18/integration-tests-bff-graphql/</link>
      <guid>https://blog.josequinto.com/2018/07/18/integration-tests-bff-graphql/</guid>
      <pubDate>Wed, 18 Jul 2018 17:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;I’ve been tasked with an interesting one this time. I’ve to create a &lt;strong&gt;BFF (Backend For Frontends) API&lt;/strong&gt;. In this post, I’ll go through the &lt;strong&gt;BFF concept&lt;/strong&gt;, &lt;strong&gt;BFF technical stack&lt;/strong&gt; and also I’ll explain in detail how to create integration tests for that &lt;strong&gt;BFF API&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;BFF-Backend-for-Frontends&quot;&gt;&lt;a href=&quot;#BFF-Backend-for-Frontends&quot; class=&quot;headerlink&quot; title=&quot;BFF (Backend for Frontends)&quot;&gt;&lt;/a&gt;BFF (Backend for Frontends)&lt;/h2&gt;&lt;p&gt;In a nutshell, &lt;strong&gt;BFF&lt;/strong&gt; is built to allow client apps to have &lt;strong&gt;more friendly&lt;/strong&gt;, &lt;strong&gt;flexible&lt;/strong&gt; and &lt;strong&gt;manageable&lt;/strong&gt; API to act as a proxy for the &lt;strong&gt;backend services&lt;/strong&gt;.
In a &lt;strong&gt;microservices architecture&lt;/strong&gt; that’s quite important as it is also used as a scoped schema for different devices or platforms. For example, we could create a BFF API for &lt;code&gt;Web&lt;/code&gt;, &lt;code&gt;Mobile&lt;/code&gt; and &lt;code&gt;Voice&lt;/code&gt; because each of these need different data and combinations of queries from the microservices.&lt;/p&gt;
&lt;p&gt;For example, an App could need interaction with different type of connectors (database, microservices, REST endpoints, external APIs, and so on)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;App &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; |-&amp;gt; BFF Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       |-&amp;gt; Custom Database&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       |-&amp;gt; User Account Microservice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       |-&amp;gt; External Weather API&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Technical-Stack&quot;&gt;&lt;a href=&quot;#Technical-Stack&quot; class=&quot;headerlink&quot; title=&quot;Technical Stack&quot;&gt;&lt;/a&gt;Technical Stack&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;BFF service&lt;/strong&gt; can be done in hundred different ways, in my case I chose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NodeJS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;babel&lt;/code&gt; as ES6 compiler&lt;/li&gt;
&lt;li&gt;&lt;code&gt;express&lt;/code&gt; as a webserver&lt;/li&gt;
&lt;li&gt;&lt;code&gt;morgan&lt;/code&gt; and &lt;code&gt;winston&lt;/code&gt; as a logger tools&lt;/li&gt;
&lt;li&gt;&lt;code&gt;helmet&lt;/code&gt; as a Security middleware for express&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graphql&lt;/code&gt; as SDL (Schema Definition Language)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apollo-server-express&lt;/code&gt; as a GraphQL Server middleware for express&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodemon&lt;/code&gt; as a dev server reload tool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;husky&lt;/code&gt; and &lt;code&gt;lint-staged&lt;/code&gt; as a git hook tool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eslint&lt;/code&gt; as a linter tool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jest&lt;/code&gt; as a testing framework&lt;/li&gt;
&lt;li&gt;&lt;code&gt;circleci&lt;/code&gt; as CI tool&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Integration-Tests&quot;&gt;&lt;a href=&quot;#Integration-Tests&quot; class=&quot;headerlink&quot; title=&quot;Integration Tests&quot;&gt;&lt;/a&gt;Integration Tests&lt;/h2&gt;&lt;p&gt;Integration Tests are really important for the QA of an API. Also, when working on microservices architecture, it is is even more necessary. Normally, when developing big applications it turns out we have 50 different microservices connected between them. As a Integration Test developers we have to make sure we only test our scope of the app (which is our current service). &lt;/p&gt;
&lt;p&gt;In a nutshell, we have inputs and outputs in our BFF layer as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Inputs –&amp;gt; Service –&amp;gt; Outputs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s ask some questions I had when started building the Integration Testing Workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can we test our API in a &lt;strong&gt;isolated way&lt;/strong&gt;?&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;docker&lt;/code&gt;, we can create isolated environment for our API under test and also for the test framework itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How can we test our API using &lt;strong&gt;production-like environment&lt;/strong&gt;?&lt;ul&gt;
&lt;li&gt;Using
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>I’ve been tasked with an interesting one this time. I’ve to create a <strong>BFF (Backend For Frontends) API</strong>. In this post, I’ll go through the <strong>BFF concept</strong>, <strong>BFF technical stack</strong> and also I’ll explain in detail how to create integration tests for that <strong>BFF API</strong>.</p><h2 id="BFF-Backend-for-Frontends"><a href="#BFF-Backend-for-Frontends" class="headerlink" title="BFF (Backend for Frontends)"></a>BFF (Backend for Frontends)</h2><p>In a nutshell, <strong>BFF</strong> is built to allow client apps to have <strong>more friendly</strong>, <strong>flexible</strong> and <strong>manageable</strong> API to act as a proxy for the <strong>backend services</strong>.In a <strong>microservices architecture</strong> that’s quite important as it is also used as a scoped schema for different devices or platforms. For example, we could create a BFF API for <code>Web</code>, <code>Mobile</code> and <code>Voice</code> because each of these need different data and combinations of queries from the microservices.</p><p>For example, an App could need interaction with different type of connectors (database, microservices, REST endpoints, external APIs, and so on)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">App </span><br><span class="line"> |</span><br><span class="line"> |-&gt; BFF Service </span><br><span class="line">       |</span><br><span class="line">       |-&gt; Custom Database</span><br><span class="line">       |-&gt; User Account Microservice</span><br><span class="line">       |-&gt; External Weather API</span><br></pre></td></tr></table></figure><h2 id="Technical-Stack"><a href="#Technical-Stack" class="headerlink" title="Technical Stack"></a>Technical Stack</h2><p>A <strong>BFF service</strong> can be done in hundred different ways, in my case I chose:</p><ul><li><code>NodeJS</code></li><li><code>babel</code> as ES6 compiler</li><li><code>express</code> as a webserver</li><li><code>morgan</code> and <code>winston</code> as a logger tools</li><li><code>helmet</code> as a Security middleware for express</li><li><code>graphql</code> as SDL (Schema Definition Language)</li><li><code>apollo-server-express</code> as a GraphQL Server middleware for express</li><li><code>nodemon</code> as a dev server reload tool</li><li><code>husky</code> and <code>lint-staged</code> as a git hook tool</li><li><code>eslint</code> as a linter tool</li><li><code>jest</code> as a testing framework</li><li><code>circleci</code> as CI tool</li></ul><h2 id="Integration-Tests"><a href="#Integration-Tests" class="headerlink" title="Integration Tests"></a>Integration Tests</h2><p>Integration Tests are really important for the QA of an API. Also, when working on microservices architecture, it is is even more necessary. Normally, when developing big applications it turns out we have 50 different microservices connected between them. As a Integration Test developers we have to make sure we only test our scope of the app (which is our current service). </p><p>In a nutshell, we have inputs and outputs in our BFF layer as well:</p><blockquote><p>Inputs –&gt; Service –&gt; Outputs</p></blockquote><p>Let’s ask some questions I had when started building the Integration Testing Workflow:</p><ul><li>How can we test our API in a <strong>isolated way</strong>?<ul><li>Using <code>docker</code>, we can create isolated environment for our API under test and also for the test framework itself.</li></ul></li><li>How can we test our API using <strong>production-like environment</strong>?<ul><li>Using <code>docker</code>, we can create a container with the same configuration as production using <code>NODE_ENV=production</code>.</li></ul></li><li>How can we provide an <strong>easy</strong> and <strong>automated way</strong> to run <strong>our integration tests</strong>?<ul><li>Using <code>docker-compose</code>, we can easily create a definition for our docker containers and run our integration tests quickly.</li></ul></li><li>How can we improve the <strong>manageability and speed</strong> on developing integration tests?<ul><li>Using <code>jest</code> snapshots to store the expected result (we save some time writing stubs here). So, we choose <code>jest</code> as a testing framework. </li></ul></li><li>How can we <strong>mock HTTP responses</strong> for the <strong>external services</strong> that our API calls?<ul><li>Using <code>mockttp</code> we can easily mock external services within our tests.</li></ul></li><li>When mocking external services HTTP responses, <strong>should we mock changing the behavior on the code</strong> or <strong>should we intercept HTTP responses from the external APIs</strong>?<ul><li>Intercept HTTP responses with <code>mockttp</code>. Then we run the integration tests in a more similar to production environment. That means we test the whole workflow: graphql server, resolvers and data sources.</li></ul></li><li>Are we going to use <strong>Cucumber</strong> and <strong>Gherkin</strong>?<ul><li><code>Gherkin</code> is high level language used on BDD (Behavior Driven Development) helping other stakeholders to define requirements. That is more used for end to end tests than integration tests.</li></ul></li><li><strong>How many integration tests</strong> should we write when testing GraphQL Server?<ul><li>I’m still working on the best approach here, but some ideas:<ul><li>Create one file for each query defined on Query schema.</li><li>Write tests for queries on all levels of the GraphQL Schema.</li><li>Write tests for error queries which will result on a GraphQL Schema error.</li></ul></li></ul></li><li>How can we mock the behavior of a <strong>Custom Database</strong>?<ul><li>If you require database queries, use <code>docker-compose</code> to run your local database with <code>seeds</code>.</li></ul></li></ul><h3 id="Integration-Test-Stack"><a href="#Integration-Test-Stack" class="headerlink" title="Integration Test Stack"></a>Integration Test Stack</h3><ul><li><code>NodeJS</code></li><li><code>docker</code> as container service</li><li><code>docker-compose</code> as a admin tool for docker</li><li><code>mockttp</code> as HTTP mock server and proxy  </li><li><code>jest</code> as testing framework (snapshots included)</li><li><code>apollo-boost</code> as apollo client</li></ul><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>NodeJS <strong>version ^8.11.3</strong></li><li><code>docker</code></li><li><code>docker-compose</code> <strong>schema version 3.6</strong></li></ul><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p>Integration Tests are going to run in <code>docker</code> containers in order to have similar to production environment in which to run tests.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my-bff-service (container)</span><br><span class="line">    - API under test</span><br><span class="line">    - Listening on 5555</span><br><span class="line"></span><br><span class="line">integration-tester (container)</span><br><span class="line">    - Call voice-bff API</span><br><span class="line">    - Use `mockttp` to mock external services calls</span><br><span class="line">        - Listening on 8888</span><br></pre></td></tr></table></figure></p><h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">my-bff-service</span><br><span class="line">├── test</span><br><span class="line">│   └── integration                         # Integration Test folder for BFF</span><br><span class="line">│       ├── endpoints                       # Tests folder for endpoints (GraphQL methods)</span><br><span class="line">│       │   ├── __snapshots__               # jest snapshots folder (API output snapshots)</span><br><span class="line">│       │   │      └── &lt;name&gt;.test.js.snap  # One snapshot file for each test file</span><br><span class="line">│       │   └── &lt;name&gt;.test.js              # Test files written in JS (jest)</span><br><span class="line">│       ├── queries                         # GraphQL queries to import in our tests</span><br><span class="line">│       │   └── &lt;method&gt;.&lt;param&gt;.gql        # Name queries files with name of the query + params</span><br><span class="line">│       ├── stubs                           # Stubs for external services called in our API under test (mockttp)</span><br><span class="line">│       │   └── &lt;external-API-Name&gt;         # Create a folder for each API to mock</span><br><span class="line">│       │       └── &lt;path&gt;.json             # Create a mock for each path or different query</span><br><span class="line">│       ├── .babelrc                        # jest is using babel behind scenes</span><br><span class="line">│       ├── .dockerignore                   # files to be ignored by docker</span><br><span class="line">│       ├── docker-compose.yml              # docker-compose file where containers will be defined</span><br><span class="line">│       ├── Dockerfile                      # Dockerfile definition for integration-tester container</span><br><span class="line">│       ├── integration.env                 # environment variables used for integration testing</span><br><span class="line">│       ├── package.json                    # integration-tester is a separate project to run in docker </span><br><span class="line">│       └── test.sh                         # script to automate docker containers creation and execution</span><br><span class="line">├── .dockerignore                           # files to be ignored by docker </span><br><span class="line">├── Dockerfile                              # Dockerfile definition for my-bff-service container</span><br><span class="line">└── src                                     # BFF Application (GraphQL Server)</span><br></pre></td></tr></table></figure><h2 id="Running-Tests-Development-Mode"><a href="#Running-Tests-Development-Mode" class="headerlink" title="Running Tests: Development Mode"></a>Running Tests: Development Mode</h2><p>On development mode, we will need <code>watch</code> mode for test files and API under test. That means is not ideal to develop tests using the <code>docker</code> workflow because it would be so slow. We are going to use our local development server configured for integration tests + running our tests locally. After developing the tests, then we will test using the containers architecture.</p><p>There are two steps to run integration tests in development mode:</p><ol><li>Start BFF on Integration Test mode<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;root of the project&gt;</span><br><span class="line">npm run dev:integration-tester</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Note: Running using dev config is going to restart the server is we do some changes.</p></blockquote><ol start="2"><li>Run Integration Tests locally<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./<span class="built_in">test</span>/integration</span><br><span class="line">npm install</span><br><span class="line">npm run <span class="built_in">test</span> -- --watch</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Note: Running jest on watch mode is going to restart the test result each time we save changes.</p></blockquote><h2 id="Running-Tests-Production-like-Mode"><a href="#Running-Tests-Production-like-Mode" class="headerlink" title="Running Tests: Production-like Mode"></a>Running Tests: Production-like Mode</h2><p>That’s the moment of the truth. We will be running our tests inside of a docker container against our API under test which also is going to be inside of other docker container. Then we have isolated environments. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;root of the project&gt;</span><br><span class="line">sudo npm run <span class="built_in">test</span>:integration</span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./<span class="built_in">test</span>/integration</span><br><span class="line">sudo ./test.sh</span><br></pre></td></tr></table></figure><blockquote><p>Note: Run commands with sudo because docker-compose requires it.</p></blockquote><h2 id="Docker-help"><a href="#Docker-help" class="headerlink" title="Docker help"></a>Docker help</h2><ul><li><p>Build and Run docker-compose definition</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up --build</span><br></pre></td></tr></table></figure></li><li><p>Stop and Remove docker-compose containers, images, networks, …</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose down --rmi &apos;local&apos;</span><br></pre></td></tr></table></figure></li><li><p>Remove non-used docker images</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker image prune -fa</span><br></pre></td></tr></table></figure></li><li><p>See all docker images</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images -a</span><br></pre></td></tr></table></figure></li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>Use <a href="https://github.com/ruyadorno/snapstub" target="_blank" rel="noopener">snapstub</a> to automate the creation of stubs for external services mocks</li></ul>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2018/07/18/integration-tests-bff-graphql/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Configuring linter, git hooks and auto-format to improve our development workflow</title>
      <link>https://blog.josequinto.com/2018/06/14/configuring-linter-git-hooks-improve-development-workflow/</link>
      <guid>https://blog.josequinto.com/2018/06/14/configuring-linter-git-hooks-improve-development-workflow/</guid>
      <pubDate>Thu, 14 Jun 2018 07:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This post is about configuring a &lt;strong&gt;linter&lt;/strong&gt;, &lt;strong&gt;git hooks&lt;/strong&gt; and &lt;strong&gt;auto-format on VS Code&lt;/strong&gt; in order to improve our development workflow. This configuration can be used for any project, but in that particular case I’ll add &lt;strong&gt;specific linting rules&lt;/strong&gt; that applly to our &lt;strong&gt;Alexa Skill’s code&lt;/strong&gt;. In order to cover all the linting options and functionality we want to configure the linter on different points of our &lt;strong&gt;workflow&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create &lt;code&gt;npm run lint&lt;/code&gt; to be run linter on demand.&lt;/li&gt;
&lt;li&gt;Create git hook &lt;code&gt;precommit&lt;/code&gt; to run our linter using &lt;a href=&quot;https://github.com/typicode/husky&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;husky&lt;/a&gt; and &lt;a href=&quot;https://github.com/okonet/lint-staged&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lint-staged&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create git hook &lt;code&gt;prepush&lt;/code&gt; to run our test framework using &lt;a href=&quot;https://github.com/typicode/husky&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;husky&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Linter&quot;&gt;&lt;a href=&quot;#Linter&quot; class=&quot;headerlink&quot; title=&quot;Linter&quot;&gt;&lt;/a&gt;Linter&lt;/h2&gt;&lt;p&gt;There are &lt;strong&gt;different methods&lt;/strong&gt; and options to consider when we want to add linting to our projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prettier/prettier&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Prettier&lt;/a&gt;: that is a good option for &lt;strong&gt;automatically format our code&lt;/strong&gt; (but at the same time is &lt;strong&gt;quite risky&lt;/strong&gt; as it will decide for you eventually)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eslint.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eslint&lt;/a&gt;: that is really &lt;strong&gt;configurable&lt;/strong&gt; by using rule sets, and it also &lt;strong&gt;integrates really well with VS Code auto-format&lt;/strong&gt; via &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;eslint extension for VS Code&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m going to use &lt;strong&gt;eslint&lt;/strong&gt; for that project&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Add-linter-git-hooks-and-rules-to-our-project&quot;&gt;&lt;a href=&quot;#Add-linter-git-hooks-and-rules-to-our-project&quot; class=&quot;headerlink&quot; title=&quot;Add linter, git hooks and rules to our project&quot;&gt;&lt;/a&gt;Add linter, git hooks and rules to our project&lt;/h2&gt;&lt;p&gt;Alexa Skill could be written using NodeJS and the Standard JavaScript linting rules. I’ll show how to configure our project to add all the requirements mentioned above.&lt;/p&gt;
&lt;h3 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; class=&quot;headerlink&quot; title=&quot;package.json&quot;&gt;&lt;/a&gt;package.json&lt;/h3&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;alexa_skill&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Alexa
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This post is about configuring a <strong>linter</strong>, <strong>git hooks</strong> and <strong>auto-format on VS Code</strong> in order to improve our development workflow. This configuration can be used for any project, but in that particular case I’ll add <strong>specific linting rules</strong> that applly to our <strong>Alexa Skill’s code</strong>. In order to cover all the linting options and functionality we want to configure the linter on different points of our <strong>workflow</strong>:</p><ul><li>Create <code>npm run lint</code> to be run linter on demand.</li><li>Create git hook <code>precommit</code> to run our linter using <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> and <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a></li><li>Create git hook <code>prepush</code> to run our test framework using <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a></li></ul><p><br></p><h2 id="Linter"><a href="#Linter" class="headerlink" title="Linter"></a>Linter</h2><p>There are <strong>different methods</strong> and options to consider when we want to add linting to our projects:</p><ul><li><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">Prettier</a>: that is a good option for <strong>automatically format our code</strong> (but at the same time is <strong>quite risky</strong> as it will decide for you eventually)</li><li><a href="https://eslint.org/" target="_blank" rel="noopener">Eslint</a>: that is really <strong>configurable</strong> by using rule sets, and it also <strong>integrates really well with VS Code auto-format</strong> via <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">eslint extension for VS Code</a>.</li></ul><blockquote><p>I’m going to use <strong>eslint</strong> for that project</p></blockquote><p><br></p><h2 id="Add-linter-git-hooks-and-rules-to-our-project"><a href="#Add-linter-git-hooks-and-rules-to-our-project" class="headerlink" title="Add linter, git hooks and rules to our project"></a>Add linter, git hooks and rules to our project</h2><p>Alexa Skill could be written using NodeJS and the Standard JavaScript linting rules. I’ll show how to configure our project to add all the requirements mentioned above.</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"alexa_skill"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Alexa Skill"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"ask deploy"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"jest"</span>,</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"eslint ."</span>,</span><br><span class="line">    <span class="attr">"precommit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">    <span class="attr">"prepush"</span>: <span class="string">"npm run test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Jose Quinto - https://blog.josequinto.com"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"ask-cli"</span>: <span class="string">"1.2.0"</span>,</span><br><span class="line">    <span class="attr">"eslint"</span>: <span class="string">"4.19.1"</span>,</span><br><span class="line">    <span class="attr">"eslint-config-standard"</span>: <span class="string">"11.0.0"</span>,</span><br><span class="line">    <span class="attr">"eslint-plugin-import"</span>: <span class="string">"2.12.0"</span>,</span><br><span class="line">    <span class="attr">"eslint-plugin-node"</span>: <span class="string">"6.0.1"</span>,</span><br><span class="line">    <span class="attr">"eslint-plugin-promise"</span>: <span class="string">"3.8.0"</span>,</span><br><span class="line">    <span class="attr">"eslint-plugin-standard"</span>: <span class="string">"3.1.0"</span>,</span><br><span class="line">    <span class="attr">"husky"</span>: <span class="string">"0.14.3"</span>,</span><br><span class="line">    <span class="attr">"jest"</span>: <span class="string">"23.1.0"</span>,</span><br><span class="line">    <span class="attr">"lint-staged"</span>: <span class="string">"7.1.3"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.js"</span>: [<span class="string">"npm run lint"</span>, <span class="string">"git add"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Add <strong>devDependencies</strong>: <code>eslint</code>, <code>husky</code>, <code>lint-staged</code>, <code>eslint-config-standard</code> and <code>eslint-plugins</code></p><blockquote><p>Run this command:</p><p><code>npm i -D eslint husky lint-staged eslint-config-standard eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-standard</code></p></blockquote></li><li><p>Add <strong>scripts</strong>: <code>test</code>, <code>lint</code>, <code>precommit</code> and <code>prepush</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"test": "jest",</span><br><span class="line">"lint": "eslint .",</span><br><span class="line">"precommit": "lint-staged",</span><br><span class="line">"prepush": "npm run test"</span><br></pre></td></tr></table></figure></li><li><p>Add <strong>lint-staged</strong> section. Apply to all <code>*.js</code> files that have been committed and run firstly <code>npm run lint</code> and then <code>git add</code>. Then before doing the git commit the linter is going to run. If the linter fails, then <code>git commit</code> will not be done.</p></li></ul><p><br></p><h3 id="eslintrc"><a href="#eslintrc" class="headerlink" title=".eslintrc"></a>.eslintrc</h3><p>As part of <strong>eslint configuration</strong> we should add <code>.eslintrc</code> file. For the specific scenario of Alexa Skill, that is the set of rules that better works for our team:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"root"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"indent"</span>: [<span class="number">2</span>, <span class="number">2</span>, &#123; <span class="attr">"SwitchCase"</span>: <span class="number">1</span> &#125;],</span><br><span class="line">    <span class="attr">"linebreak-style"</span>: [<span class="number">2</span>, <span class="string">"unix"</span>],</span><br><span class="line">    <span class="attr">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</span><br><span class="line">    <span class="attr">"no-console"</span>: [<span class="number">2</span>, &#123; <span class="attr">"allow"</span>: [<span class="string">"warn"</span>, <span class="string">"error"</span>] &#125;],</span><br><span class="line">    <span class="attr">"space-before-function-paren"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"arrow-body-style"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"class-methods-use-this"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">    <span class="attr">"consistent-return"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"func-names"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"global-require"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"max-len"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-confusing-arrow"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-mixed-operators"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-nested-ternary"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-param-reassign"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-plusplus"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-shadow"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-underscore-dangle"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"quotes"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">"double"</span>,</span><br><span class="line">      &#123; <span class="attr">"avoidEscape"</span>: <span class="literal">true</span>, <span class="attr">"allowTemplateLiterals"</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"jest"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h3><p>In order to make sure we are not linting external files and libraries we should ignore <code>node_modules</code> folder using <code>.eslintignore</code> file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!.*</span><br><span class="line"></span><br><span class="line"># node_modules ignored by default</span><br><span class="line">**/node_modules/*</span><br></pre></td></tr></table></figure><p><br></p><h3 id="VS-Extensions"><a href="#VS-Extensions" class="headerlink" title="VS Extensions"></a>VS Extensions</h3><p>If we are using VS Code, we also can suggest or recommend some extensions which will help providing “live lintint” on the files opened by VS Code.We can add under <code>.vscode</code> folder, a file called <code>extensions.json</code> with that object on it:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"recommendations"</span>: [<span class="string">"dbaeumer.vscode-eslint"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, when a new developer opens that project, will be suggested to install <code>eslint</code> extension.</p><blockquote><p><strong>Note</strong>: Eslint <strong>VS Code extension</strong> will also use our <code>.eslintrc</code> rules when we use <strong>auto-formating</strong> on our files, applying as many rules as it can.</p><p><strong>VS Code Auto-Formatting</strong> shortcuts:</p><ul><li><code>MacOS</code>: ⇧ + ⌥ + F</li><li><code>Windows</code>: Shift + Alt + F</li><li><code>Linux</code>: Control + Shift + I</li></ul></blockquote><p><br></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This configuration is <strong>not only for Alexa Skill project</strong>, we use it in some of our <strong>JS</strong>, <strong>React</strong> and <strong>NodeJS</strong> projects and it really helps on improving our <strong>development workflow performance</strong>.Having that configuration in our project will help on:</p><ul><li>Running <strong>linter on demand</strong> -&gt; <code>npm run lint</code></li><li>Running <strong>linter before commit</strong> -&gt; <code>git commit</code></li><li>Running <strong>tests</strong> before push -&gt; <code>git push</code></li><li>Running <strong>linter on each file in live</strong> (using VS Code Extension) and being able to solve some issues with auto-formatting.</li></ul><p><br></p>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2018/06/14/configuring-linter-git-hooks-improve-development-workflow/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Creating a Development Pipeline for Alexa Skill on a multideveloper environment</title>
      <link>https://blog.josequinto.com/2018/06/11/development-pipeline-alexa-skill-multideveloper-environment/</link>
      <guid>https://blog.josequinto.com/2018/06/11/development-pipeline-alexa-skill-multideveloper-environment/</guid>
      <pubDate>Mon, 11 Jun 2018 07:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;There are &lt;strong&gt;several challenges&lt;/strong&gt; in developing &lt;code&gt;Alexa Skills&lt;/code&gt; in a &lt;code&gt;multideveloper environment&lt;/code&gt; because the way in which is tested and deployed the skill itself. I’m proud for being part of a &lt;em&gt;team&lt;/em&gt; which are going to start building an &lt;code&gt;Alexa Skill&lt;/code&gt;. That’s exciting project that involves thinking in a different way at all levels, from thinking about Intents instead of functions or modules until configuring the development environment pipeline to keep on synch a &lt;strong&gt;multideveloper environment&lt;/strong&gt;. ¡¡🚀💪 Challenge accepted 💪🚀!!  &lt;/p&gt;
&lt;h2 id=&quot;First-Steps-Team-Requirements-and-Design&quot;&gt;&lt;a href=&quot;#First-Steps-Team-Requirements-and-Design&quot; class=&quot;headerlink&quot; title=&quot;First Steps (Team, Requirements and Design)&quot;&gt;&lt;/a&gt;First Steps (Team, Requirements and Design)&lt;/h2&gt;&lt;p&gt;First of all, our current team consists on &lt;code&gt;Product Owner&lt;/code&gt; 👨‍🚀, &lt;code&gt;Voice Apps UX&lt;/code&gt; 👨‍🎨, &lt;code&gt;Voice Apps QA&lt;/code&gt; 👨‍🔬, and &lt;code&gt;Developers&lt;/code&gt;👨‍💻. I was never involved on the requirements gathering and design stages for a &lt;strong&gt;Voice App&lt;/strong&gt;, but the experience so far is quite different given the fact people is going to use our skill using voice at home and normally in a relaxed environment with no devices on hands.   &lt;/p&gt;
&lt;h2 id=&quot;Development-Pipeline&quot;&gt;&lt;a href=&quot;#Development-Pipeline&quot; class=&quot;headerlink&quot; title=&quot;Development Pipeline&quot;&gt;&lt;/a&gt;Development Pipeline&lt;/h2&gt;&lt;p&gt;One of the ⚡️ &lt;strong&gt;main challenges&lt;/strong&gt; ⚡️ in Alexa Skill’s &lt;strong&gt;multideveloper environment&lt;/strong&gt; is to &lt;strong&gt;keep in synch all the development environments without override others changes&lt;/strong&gt;. The reason why that is quite difficult is because, nowadays, is not possible to develop / test our skill’s intents locally. So we need to sign in into &lt;code&gt;Alexa Skill Kit Developer Account&lt;/code&gt; in order to be able to see and test our &lt;code&gt;intents&lt;/code&gt; and &lt;code&gt;interaction models&lt;/code&gt;. Then, as a developer I do need to make changes and / or deploy changes for interaction model on &lt;em&gt;Alexa Cloud&lt;/em&gt; and use &lt;em&gt;our local environment&lt;/em&gt; to develop the intent’s code. &lt;/p&gt;
&lt;p&gt;In a nutshell, our Alexa Skill will need to &lt;strong&gt;store files in two places&lt;/strong&gt; to be ready for test and try: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Skill Metadata file&lt;/code&gt; and &lt;code&gt;Interaction Model Definition file&lt;/code&gt; are going to be published into one &lt;code&gt;Alexa Skill Kit Developer Console&lt;/code&gt; account (Amazon’s Cloud).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lambda Function Code&lt;/code&gt; is going to be published in &lt;code&gt;Amazon Web Services&amp;#39; Lambda function&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is no problem on having to deploy each part of the Alexa Skill on different cloud places, as we can see on that &lt;a href=&quot;/2018/04/23/building-voice-app-custom-alexa-skill-node-js/&quot;&gt;post&lt;/a&gt;, we can use some &lt;code&gt;cli&lt;/code&gt; tools to help with the automatization of it. But the &lt;strong&gt;problem&lt;/strong&gt; is that &lt;strong&gt;each developer needs to have the model and code deployed in order to test it&lt;/strong&gt; and &lt;strong&gt;we don’t want override each other continuously&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Then, after few brainstorming meetings we decided:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each developer is going to have one different Alexa Skill Kit Development Console account. And also, is going to create its own skill on it.&lt;/li&gt;
&lt;li&gt;Each developer is going to have one different AWS account also linked with the Amazon Developer account.&lt;/li&gt;
&lt;li&gt;For each developer we are going to create a lambda function with that name: &lt;code&gt;ask-&amp;lt;skillType&amp;gt;-&amp;lt;skillName&amp;gt;-&amp;lt;profile&amp;gt;&lt;/code&gt;, where profile is the name of the profile created for that user.&lt;/li&gt;
&lt;li&gt;There will be an Amazon Developer account for Staging (profile =&amp;gt; STG) &lt;/li&gt;
&lt;li&gt;There will be an AWS Lambda Function for Staging (profile =&amp;gt; STG).&lt;/li&gt;
&lt;li&gt;There will be an Amazon Developer account for PROD (profile =&amp;gt; PROD). The production
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>There are <strong>several challenges</strong> in developing <code>Alexa Skills</code> in a <code>multideveloper environment</code> because the way in which is tested and deployed the skill itself. I’m proud for being part of a <em>team</em> which are going to start building an <code>Alexa Skill</code>. That’s exciting project that involves thinking in a different way at all levels, from thinking about Intents instead of functions or modules until configuring the development environment pipeline to keep on synch a <strong>multideveloper environment</strong>. ¡¡🚀💪 Challenge accepted 💪🚀!!  </p><h2 id="First-Steps-Team-Requirements-and-Design"><a href="#First-Steps-Team-Requirements-and-Design" class="headerlink" title="First Steps (Team, Requirements and Design)"></a>First Steps (Team, Requirements and Design)</h2><p>First of all, our current team consists on <code>Product Owner</code> 👨‍🚀, <code>Voice Apps UX</code> 👨‍🎨, <code>Voice Apps QA</code> 👨‍🔬, and <code>Developers</code>👨‍💻. I was never involved on the requirements gathering and design stages for a <strong>Voice App</strong>, but the experience so far is quite different given the fact people is going to use our skill using voice at home and normally in a relaxed environment with no devices on hands.   </p><h2 id="Development-Pipeline"><a href="#Development-Pipeline" class="headerlink" title="Development Pipeline"></a>Development Pipeline</h2><p>One of the ⚡️ <strong>main challenges</strong> ⚡️ in Alexa Skill’s <strong>multideveloper environment</strong> is to <strong>keep in synch all the development environments without override others changes</strong>. The reason why that is quite difficult is because, nowadays, is not possible to develop / test our skill’s intents locally. So we need to sign in into <code>Alexa Skill Kit Developer Account</code> in order to be able to see and test our <code>intents</code> and <code>interaction models</code>. Then, as a developer I do need to make changes and / or deploy changes for interaction model on <em>Alexa Cloud</em> and use <em>our local environment</em> to develop the intent’s code. </p><p>In a nutshell, our Alexa Skill will need to <strong>store files in two places</strong> to be ready for test and try: </p><ul><li><code>Skill Metadata file</code> and <code>Interaction Model Definition file</code> are going to be published into one <code>Alexa Skill Kit Developer Console</code> account (Amazon’s Cloud).</li><li><code>Lambda Function Code</code> is going to be published in <code>Amazon Web Services&#39; Lambda function</code></li></ul><p>There is no problem on having to deploy each part of the Alexa Skill on different cloud places, as we can see on that <a href="/2018/04/23/building-voice-app-custom-alexa-skill-node-js/">post</a>, we can use some <code>cli</code> tools to help with the automatization of it. But the <strong>problem</strong> is that <strong>each developer needs to have the model and code deployed in order to test it</strong> and <strong>we don’t want override each other continuously</strong>. </p><p>Then, after few brainstorming meetings we decided:</p><ul><li>Each developer is going to have one different Alexa Skill Kit Development Console account. And also, is going to create its own skill on it.</li><li>Each developer is going to have one different AWS account also linked with the Amazon Developer account.</li><li>For each developer we are going to create a lambda function with that name: <code>ask-&lt;skillType&gt;-&lt;skillName&gt;-&lt;profile&gt;</code>, where profile is the name of the profile created for that user.</li><li>There will be an Amazon Developer account for Staging (profile =&gt; STG) </li><li>There will be an AWS Lambda Function for Staging (profile =&gt; STG).</li><li>There will be an Amazon Developer account for PROD (profile =&gt; PROD). The production Amazon Developer account will be the only one that eventually is going to Deploy and Publish the Skill to Amazon SKill’s Store.</li><li>There will be an AWS Lambda Function for Production (profile =&gt; PROD).</li><li>We are going to use Github as a Control Version System and single source for the truth.</li></ul><h2 id="Multideveloper-Environment-Sync"><a href="#Multideveloper-Environment-Sync" class="headerlink" title="Multideveloper Environment Sync"></a>Multideveloper Environment Sync</h2><p>In order to be able to sync Alexa Skill environment we have to build some scripts to push changes to cloud from local and the other way around.</p><h3 id="Pull-changes-from-Github-and-push-them-into-Dev-Environment-Getting-the-Dev-environment-ready-with-the-latest-changes"><a href="#Pull-changes-from-Github-and-push-them-into-Dev-Environment-Getting-the-Dev-environment-ready-with-the-latest-changes" class="headerlink" title="Pull changes from Github and push them into Dev Environment (Getting the Dev environment ready with the latest changes)"></a>Pull changes from Github and push them into Dev Environment (Getting the Dev environment ready with the latest changes)</h3><p>☑️ 1. Dev will <code>pull</code> from github for latest changes</p><p>☑️ 2. Script to backup Interaction Model before pushing the new one</p><p>☑️ 3. Dev will <code>deploy</code> changes related with <code>Interaction Model and Skill Metadata</code> using <code>ask cli</code> tool</p><p>☑️ 4. Script to backup the Lambda function code before pushing the new one</p><p>☑️ 5. Dev will <code>deploy</code> changes related with <code>Lambda Function Code</code> to <code>AWS</code> using <code>aws cli</code> tool</p><p><img src="./localToCloud.png" alt="push to cloud"></p><h3 id="Pull-changes-from-Dev-Environment-and-push-them-into-Github"><a href="#Pull-changes-from-Dev-Environment-and-push-them-into-Github" class="headerlink" title="Pull changes from Dev Environment and push them into Github"></a>Pull changes from Dev Environment and push them into Github</h3><p>☑️ 1. Script to backup our local Interaction Model before overriding it</p><p>☑️ 2. Dev will <code>get the model and skill metadata</code> from <code>Alexa Developer Console</code> using <code>ask cli</code> tool</p><p>☑️ 3. Script to backup our local Lambda Function Code before overriding it</p><p>☑️ 4. Dev will <code>get lambda function code</code> from <code>AWS</code> using <code>ask cli</code> tool</p><p>☑️ 4.1. Dev will implement some <code>changes</code> (optional)</p><p>☑️ 5. Dev will <code>push</code> into Github using a <code>feature branch</code></p><p><img src="./CloudToLocal.png" alt="pull from cloud"></p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>In terms of testing we will create a hook up to <code>git commit</code> in order to run linter and test before pushing changes and also we will integrate with Circle CI and Github. </p><ul><li><code>Unit Tests</code> will be created at Intent level.</li><li><code>Integration Tests</code> will be created if there are some external services and / or databases for the skill.</li><li>Multiple <code>Flow Tests</code> will be created for each Intent.</li></ul><p>Happy Voice App Coding 🎤🎤🎤!<br></p>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2018/06/11/development-pipeline-alexa-skill-multideveloper-environment/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Deploying Alexa Skill using an already created lambda function and role</title>
      <link>https://blog.josequinto.com/2018/04/25/deploy-alexa-skill-using-already-created-lambda-function-and-role/</link>
      <guid>https://blog.josequinto.com/2018/04/25/deploy-alexa-skill-using-already-created-lambda-function-and-role/</guid>
      <pubDate>Wed, 25 Apr 2018 07:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;When developing a &lt;strong&gt;custom Alexa skill&lt;/strong&gt;, if your role is &lt;code&gt;developer&lt;/code&gt; 💻 and also &lt;code&gt;devops&lt;/code&gt; ⚙️ for your Alexa Skill, then you’ll have full permissions. So, in order to &lt;em&gt;automatize the deployment of your custom Alexa Skill&lt;/em&gt;, you’ll probably end up using &lt;code&gt;ask-cli&lt;/code&gt; client tool, specifically the command &lt;code&gt;ask deploy&lt;/code&gt; which creates a new AWS Lambda function named &lt;code&gt;ask-&amp;lt;skillType&amp;gt;-&amp;lt;skillName&amp;gt;-&amp;lt;profile&amp;gt;&lt;/code&gt; (with the appropriate type, name, and profile for &lt;code&gt;&amp;lt;skillType&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;skillName&amp;gt;&lt;/code&gt;, profile). The AWS Lambda function is created with an IAM role named &lt;code&gt;ask-lambda-&amp;lt;skill name&amp;gt;-&amp;lt;profile&amp;gt;&lt;/code&gt;, attached to the &lt;code&gt;basic execution policy&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;However, if you are a &lt;code&gt;developer&lt;/code&gt; 💻 and you rely on &lt;code&gt;devops&lt;/code&gt; ⚙️ to create your &lt;strong&gt;AWS resources&lt;/strong&gt;, you’ll probably ask them to create new &lt;strong&gt;lambda function and role&lt;/strong&gt; to start working with our custom Alexa Skill. And probably, the &lt;strong&gt;name of the lambda role and function are different&lt;/strong&gt; than what &lt;code&gt;ask-cli&lt;/code&gt; is &lt;strong&gt;using and expecting by default&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;This post is to explain in detail how to &lt;strong&gt;automatically deploy&lt;/strong&gt; a custom Alexa Skill which uses an &lt;strong&gt;already created lambda function and role with a different names than the default ones&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Create-and-Deploy-Custom-Alexa-Skill&quot;&gt;&lt;a href=&quot;#Create-and-Deploy-Custom-Alexa-Skill&quot; class=&quot;headerlink&quot; title=&quot;Create and Deploy Custom Alexa Skill&quot;&gt;&lt;/a&gt;Create and Deploy Custom Alexa Skill&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Before continue, If not familiar with custom Alexa Skill, I recommend to quick read an article I wrote about &lt;a href=&quot;/2018/04/23/building-voice-app-custom-alexa-skill-node-js/&quot;&gt;main concepts, requirements, project structure and code samples for custom Alexa Skills&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m going to use &lt;a href=&quot;https://github.com/alexa/skill-sample-nodejs-city-guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;City Guide official code sample&lt;/a&gt; as a &lt;strong&gt;baseline or boilerplate&lt;/strong&gt; for this post. &lt;strong&gt;In that code sample&lt;/strong&gt;, there is a complete guide about how to create and deploy a custom skill &lt;strong&gt;but not in a automatic way&lt;/strong&gt;. We are going to show how to automatically deploy using &lt;code&gt;ask-cli&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;Create-new-Skill-using-code-sample&quot;&gt;&lt;a href=&quot;#Create-new-Skill-using-code-sample&quot; class=&quot;headerlink&quot; title=&quot;Create new Skill using code sample&quot;&gt;&lt;/a&gt;Create new Skill using code sample&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Double check you have installed &lt;a href=&quot;https://github.com/alexa/skill-sample-nodejs-city-guide/blob/master/instructions/7-cli.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ASK CLI&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ask&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialize credentials profile
We have to configure credentials to access Alexa Skills Kit Developer Console and AWS Console. &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ask init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;code&gt;Create a new profile&lt;/code&gt; and enter a name&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;default&lt;/code&gt; as a AWS Profile to deploy Lambda function, then you will be redirected to browser to log in in AWS and cache your credentials.&lt;/li&gt;
&lt;li&gt;Return to terminal and you’ll get message like this:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>When developing a <strong>custom Alexa skill</strong>, if your role is <code>developer</code> 💻 and also <code>devops</code> ⚙️ for your Alexa Skill, then you’ll have full permissions. So, in order to <em>automatize the deployment of your custom Alexa Skill</em>, you’ll probably end up using <code>ask-cli</code> client tool, specifically the command <code>ask deploy</code> which creates a new AWS Lambda function named <code>ask-&lt;skillType&gt;-&lt;skillName&gt;-&lt;profile&gt;</code> (with the appropriate type, name, and profile for <code>&lt;skillType&gt;</code>, <code>&lt;skillName&gt;</code>, profile). The AWS Lambda function is created with an IAM role named <code>ask-lambda-&lt;skill name&gt;-&lt;profile&gt;</code>, attached to the <code>basic execution policy</code>. </p><p>However, if you are a <code>developer</code> 💻 and you rely on <code>devops</code> ⚙️ to create your <strong>AWS resources</strong>, you’ll probably ask them to create new <strong>lambda function and role</strong> to start working with our custom Alexa Skill. And probably, the <strong>name of the lambda role and function are different</strong> than what <code>ask-cli</code> is <strong>using and expecting by default</strong>. </p><p>This post is to explain in detail how to <strong>automatically deploy</strong> a custom Alexa Skill which uses an <strong>already created lambda function and role with a different names than the default ones</strong>.</p><p><br></p><h2 id="Create-and-Deploy-Custom-Alexa-Skill"><a href="#Create-and-Deploy-Custom-Alexa-Skill" class="headerlink" title="Create and Deploy Custom Alexa Skill"></a>Create and Deploy Custom Alexa Skill</h2><blockquote><p>Before continue, If not familiar with custom Alexa Skill, I recommend to quick read an article I wrote about <a href="/2018/04/23/building-voice-app-custom-alexa-skill-node-js/">main concepts, requirements, project structure and code samples for custom Alexa Skills</a>.</p></blockquote><blockquote><p>I’m going to use <a href="https://github.com/alexa/skill-sample-nodejs-city-guide" target="_blank" rel="noopener">City Guide official code sample</a> as a <strong>baseline or boilerplate</strong> for this post. <strong>In that code sample</strong>, there is a complete guide about how to create and deploy a custom skill <strong>but not in a automatic way</strong>. We are going to show how to automatically deploy using <code>ask-cli</code>.</p></blockquote><p><br></p><h3 id="Create-new-Skill-using-code-sample"><a href="#Create-new-Skill-using-code-sample" class="headerlink" title="Create new Skill using code sample"></a>Create new Skill using code sample</h3><ol><li><p>Double check you have installed <a href="https://github.com/alexa/skill-sample-nodejs-city-guide/blob/master/instructions/7-cli.md" target="_blank" rel="noopener">ASK CLI</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ask</span><br></pre></td></tr></table></figure></li><li><p>Initialize credentials profileWe have to configure credentials to access Alexa Skills Kit Developer Console and AWS Console. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ask init</span><br></pre></td></tr></table></figure></li></ol><ul><li>Select <code>Create a new profile</code> and enter a name</li><li>Select <code>default</code> as a AWS Profile to deploy Lambda function, then you will be redirected to browser to log in in AWS and cache your credentials.</li><li>Return to terminal and you’ll get message like this:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Switch to &apos;Login with Amazon&apos; page...</span><br><span class="line">Tokens fetched and recorded in ask-cli config.</span><br><span class="line">Vendor ID set as XXXXXXXXXXXXXXX</span><br><span class="line">Profile [default] initialized successfully.</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>IMPORTANT</strong> ❗️❗️ If you are using <code>Multi-Factor Authentication</code> and/or <code>Session Token</code> make sure you update the variables in ~/.aws/credentials at [default] profile section. Do in that way, because, <code>ask-cli</code> will [default] profile from this file to authenticate to AWS. See more info <a href="https://developer.amazon.com/docs/smapi/set-up-credentials-for-an-amazon-web-services-account.html" target="_blank" rel="noopener">here</a></p></blockquote><ol start="3"><li>Create a new project using an existing templateWe can use <a href="https://developer.amazon.com/docs/smapi/ask-cli-command-reference.html#new-command" target="_blank" rel="noopener"><code>ask new</code></a> command to create a new project using an existing template from <a href="https://s3.amazonaws.com/ask-cli/templates.json" target="_blank" rel="noopener">the official templates</a>.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ask new --template &quot;City Guide&quot; --skill-name &quot;my-skill-name&quot;</span><br></pre></td></tr></table></figure></li></ol><p>After creating the new skill, we get this message<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;my-skill-name&apos; skill package has been created based on the chosen template</span><br></pre></td></tr></table></figure></p><blockquote><p>Note: ask new command is not going to upload anything to the server, that is just create the project folder locally. A new folder with the name <code>my-skill.name</code> will be created under your current path. </p></blockquote><ol start="4"><li>Create .gitignore (optional)If you are using <code>git</code> I suggest you to create .gitignore file in your root folder ignoring node_modules folder at root or sub-folders<code>.gitignore</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br></pre></td></tr></table></figure></li></ol><p><br></p><h3 id="Deploy-the-skill"><a href="#Deploy-the-skill" class="headerlink" title="Deploy the skill"></a>Deploy the skill</h3><blockquote><p>In my case, deployment is quite special case as I already have created AWS Lambda function. Normally if you do <code>ask deploy</code> it deploys everything, including skill, model and lambda. In our case I’m going to deploy skill and models using <code>ask deploy</code> and then lambda separately.</p></blockquote><ol><li>Deploy Skill + Model first timeFirstly, we have to publish skill + interaction model and after we will change the configuration to include the already created lambda function.</li></ol><p>In order to remove the lambda function configuration for doing the first deployment we must configure <code>.ask/config</code> and <code>skill.json</code> files in that specific way: </p><p><code>.ask/config</code>:</p><ul><li><strong>skill_id</strong> should be blank. A new skill_id will be created and added automatically in config file.</li><li><strong>apis.custom</strong> should be blank. So, we want lambda function be empty on first time deployment.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;deploy_settings&quot;: &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">      &quot;skill_id&quot;: &quot;&quot;,</span><br><span class="line">      &quot;was_cloned&quot;: false,</span><br><span class="line">      &quot;merge&quot;: &#123;</span><br><span class="line">        &quot;manifest&quot;: &#123;</span><br><span class="line">          &quot;apis&quot;: &#123;</span><br><span class="line">            &quot;custom&quot;: &#123;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>skill.json</code>:</p><ul><li><strong>apis.custom</strong> should be blank. So, we want lambda function be empty on first time deployment.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;manifest&quot;: &#123;</span><br><span class="line">    &quot;publishingInformation&quot;: &#123;</span><br><span class="line">      &quot;locales&quot;: &#123;</span><br><span class="line">        &quot;en-GB&quot;: &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;apis&quot;: &#123;</span><br><span class="line">      &quot;custom&quot;: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;manifestVersion&quot;: &quot;1.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>After removing the lambda configuration, we can deploy the skill<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ask deploy</span><br></pre></td></tr></table></figure></p><p>Then, we’ll receive this message from console:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-------------------- Create Skill Project --------------------</span><br><span class="line">Profile for the deployment: [default]</span><br><span class="line">Skill Id: amzn1.ask.skill.1328031f-7fe2-4b78-a090-XXXXXXXXXXXX</span><br><span class="line">Skill deployment finished.</span><br><span class="line">Model deployment finished.</span><br><span class="line">[Info]: No lambda functions need to be deployed.</span><br></pre></td></tr></table></figure></p><p>We can also check the skill_id property has been filled now in the <code>.ask/config</code> file:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;skill_id&quot;: &quot;amzn1.ask.skill.1328031f-7fe2-4b78-a090-XXXXXXXXXXXX&quot;</span><br></pre></td></tr></table></figure></p><p>At this point we also can check our skill has been deployed in <a href="https://developer.amazon.com/alexa/console/ask" target="_blank" rel="noopener">Alexa Skills Kit Developer Console</a>:</p><p><img src="./newSkill.png" alt="new skill"></p><ol start="2"><li>Update lambda function bits on deployment metadataNow our skill has been created for the first time, then we can update the lambda function metadata in order to be deployed / updated later on when we use <code>ask deploy</code> again.</li></ol><p>In order to be able to deploy our skill with a different lambda function configuration we have to do two things:</p><p>2.1. Update <code>skill_id</code> in our lambda function trigger (Alexa Skill Kit).We can add and configure a trigger for a lambda function through <a href="https://aws.amazon.com/console" target="_blank" rel="noopener">AWS Console</a></p><p><img src="./alexaSkillsKitTrigger.png" alt="aws console lambda trigger configuration"></p><blockquote><p>Note: Remember to click <code>Add</code> and <code>Save</code> too.</p></blockquote><p>2.2. Re-deploy the skill updating lambda function source files folder and endpoint ARNBefore re-deploy, we have to configure our lambda source files and also our lambda function name in AWS (ARN). We do that, by changing these two files in our project:</p><p><code>skill.json</code>:</p><ul><li><strong>apis.custom</strong> we have to add a new endpoint object with a sourceDir property set to “lambda/custom”, which is the path or our source files.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;apis&quot;: &#123;</span><br><span class="line">  &quot;custom&quot;: &#123;</span><br><span class="line">    &quot;endpoint&quot;: &#123;</span><br><span class="line">      &quot;sourceDir&quot;: &quot;lambda/custom&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>.ask/config</code>:</p><ul><li><strong>apis.custom</strong> we have to add a new endpoint object with a uri property set to the name of our function (ARN).<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;apis&quot;: &#123;</span><br><span class="line">  &quot;custom&quot;: &#123;</span><br><span class="line">    &quot;endpoint&quot;: &#123;</span><br><span class="line">      &quot;uri&quot;: &quot;arn:aws:lambda:eu-west-1:XXXXXXXXXXXX:function:lambdaName&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Then we can re-deploy:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ask deploy</span><br></pre></td></tr></table></figure></p><p>You’ll get this result:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-------------------- Update Skill Project --------------------</span><br><span class="line">Skill Id: amzn1.ask.skill.1328031f-7fe2-4b78-a090-XXXXXXXXXXXX</span><br><span class="line">Skill deployment finished.</span><br><span class="line">Model deployment finished.</span><br><span class="line">Lambda deployment finished.</span><br><span class="line">Your skill is now deployed and enabled in the development stage.</span><br><span class="line">Try invoking the skill by saying “Alexa, open &#123;your_skill_invocation_name&#125;” or simulate an invocation via the `ask simulate` command.</span><br></pre></td></tr></table></figure></p><p>🚀 🚀 We have everything deployed 🚀 🚀</p><p><br></p><h3 id="Check-the-skill-deployment-was-successful"><a href="#Check-the-skill-deployment-was-successful" class="headerlink" title="Check the skill deployment was successful"></a>Check the skill deployment was successful</h3><p>We can go to our <a href="https://developer.amazon.com/alexa/console/ask" target="_blank" rel="noopener">Alexa Skills Kit Developer Console</a> and click in our skill to see the detailed configuration. Then we can see everything is green in our “Skill Check List”:</p><p><img src="./skillChecklist.png" alt="skill check list"></p><p><br></p><h3 id="Test-the-skill"><a href="#Test-the-skill" class="headerlink" title="Test the skill"></a>Test the skill</h3><p>Also you can click on “Test” tab to test the skill.</p><p><img src="./AlexaTest.png" alt="test alexa skill"></p><p><br></p><h2 id="More-Resources"><a href="#More-Resources" class="headerlink" title="More Resources"></a>More Resources</h2><p>More information about AWS Lambda env variables:</p><ul><li><a href="https://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html</a></li><li><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-environment.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/cli/latest/userguide/cli-environment.html</a></li><li><a href="https://forums.developer.amazon.com/questions/119998/set-lambda-runtimehandler-from-ask-deploy.html" target="_blank" rel="noopener">https://forums.developer.amazon.com/questions/119998/set-lambda-runtimehandler-from-ask-deploy.html</a></li></ul>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2018/04/25/deploy-alexa-skill-using-already-created-lambda-function-and-role/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Building my first Voice App for Amazon Echo (Alexa) Skill with NodeJS</title>
      <link>https://blog.josequinto.com/2018/04/23/building-voice-app-custom-alexa-skill-node-js/</link>
      <guid>https://blog.josequinto.com/2018/04/23/building-voice-app-custom-alexa-skill-node-js/</guid>
      <pubDate>Mon, 23 Apr 2018 07:00:24 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;First time I heard about &lt;a href=&quot;https://www.amazon.co.uk/Echo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alexa / Echo&lt;/a&gt; 👀 I loved the idea of having an &lt;strong&gt;assistant&lt;/strong&gt; at home capable of playing music on demand, setting up alarms, giving the flash briefings, an so on.&lt;br&gt;Currently, I’m building a &lt;strong&gt;Voice App&lt;/strong&gt; using &lt;strong&gt;Amazon Echo - Alexa&lt;/strong&gt; and &lt;strong&gt;Google Home&lt;/strong&gt; 💻. 
That’s quite interesting challenge given the fact I’ll be using AWS Lambda function and NodeJS as part of the technology stack.&lt;/p&gt;
&lt;p&gt;This post is intended to gather all &lt;strong&gt;my notes&lt;/strong&gt; meanwhile I was learning and developing my first Voice App using &lt;a href=&quot;https://developer.amazon.com/alexa-skills-kit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alexa Skills Kit&lt;/a&gt;. I thought it will be important to share this notes as I felt quite lost at the beginning.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I’ll be using &lt;code&gt;JavaScript&lt;/code&gt; and &lt;code&gt;NodeJS&lt;/code&gt; as a development language and engine for my first Alexa Custom Skill. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Concepts&quot;&gt;&lt;a href=&quot;#Concepts&quot; class=&quot;headerlink&quot; title=&quot;Concepts&quot;&gt;&lt;/a&gt;Concepts&lt;/h2&gt;&lt;p&gt;When I started looking at the documentation 👨‍💻, I realized there is a completely &lt;em&gt;new vocabulary and concepts&lt;/em&gt;. Let’s see some of the concepts I learnt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alexa Skill&lt;/code&gt;: It is the &lt;strong&gt;basic unit&lt;/strong&gt; of Voice App for &lt;strong&gt;Amazon Echo&lt;/strong&gt;. So as a &lt;strong&gt;developer&lt;/strong&gt; you can &lt;strong&gt;develop and publish&lt;/strong&gt; a new Alexa Skill and as a &lt;strong&gt;end user&lt;/strong&gt; you can &lt;strong&gt;search and install&lt;/strong&gt; that Alexa Skill in your &lt;strong&gt;Amazon Echo&lt;/strong&gt;. There are different kind of &lt;a href=&quot;https://developer.amazon.com/alexa-skills-kit/learn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;skills&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alexa SKills Kit&lt;/code&gt;: The &lt;strong&gt;Alexa Skills Kit (ASK)&lt;/strong&gt; is a collection of &lt;strong&gt;self-service APIs&lt;/strong&gt;, &lt;strong&gt;tools&lt;/strong&gt;, &lt;strong&gt;documentation&lt;/strong&gt;, and &lt;strong&gt;code samples&lt;/strong&gt; that makes it fast and easy for you to add skills to Alexa.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alexa Skills Kit Developer Console&lt;/code&gt;: It is the &lt;a href=&quot;https://developer.amazon.com/alexa/console/ask&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;online tool&lt;/a&gt; to &lt;strong&gt;Build&lt;/strong&gt;, &lt;strong&gt;Manage&lt;/strong&gt;, &lt;strong&gt;Test&lt;/strong&gt;, &lt;strong&gt;Launch&lt;/strong&gt;, &lt;strong&gt;Measure&lt;/strong&gt; and &lt;strong&gt;Delete&lt;/strong&gt; your &lt;strong&gt;Alexa Skills&lt;/strong&gt;. You have to sign up for an &lt;strong&gt;Amazon Development Account&lt;/strong&gt; in order to use it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Skill Id&lt;/code&gt;: Unique identifier for your skill. It is very useful when you need to &lt;em&gt;connect your AWS Lambda function with your Skill&lt;/em&gt; through a trigger called &lt;em&gt;Alexa Skill Kit&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Invocation Name&lt;/code&gt;: It’s the name used by Alexa to open our app or skill.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Intent&lt;/code&gt;: It’s a way to group common and &lt;strong&gt;reusable actions or intentions&lt;/strong&gt;. An intent represents an action that fulfills a &lt;strong&gt;user’s spoken request&lt;/strong&gt;. Intents can optionally have arguments called slots. Also is the basic unit of development for a custom Alexa Skill. Each custom Intent have to define the intent schema plus the code to handle that intent. There are some &lt;a href=&quot;https://developer.amazon.com/docs/custom-skills/standard-built-in-intents.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;standard built-in intents&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Utterances&lt;/code&gt;: A set of likely &lt;strong&gt;spoken phrases&lt;/strong&gt; mapped to the &lt;strong&gt;intents&lt;/strong&gt;. They are different ways to invoke or activate an intent. For example for &lt;strong&gt;CancelIntent&lt;/strong&gt;, we have these utterances: &lt;strong&gt;cancel&lt;/strong&gt;, &lt;strong&gt;never mind&lt;/strong&gt; and &lt;strong&gt;forget it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Slots&lt;/code&gt;: A representative list of possible values for a slot. For example, the intent &lt;code&gt;I want to travel to
          
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>First time I heard about <a href="https://www.amazon.co.uk/Echo" target="_blank" rel="noopener">Alexa / Echo</a> 👀 I loved the idea of having an <strong>assistant</strong> at home capable of playing music on demand, setting up alarms, giving the flash briefings, an so on.<br>Currently, I’m building a <strong>Voice App</strong> using <strong>Amazon Echo - Alexa</strong> and <strong>Google Home</strong> 💻. That’s quite interesting challenge given the fact I’ll be using AWS Lambda function and NodeJS as part of the technology stack.</p><p>This post is intended to gather all <strong>my notes</strong> meanwhile I was learning and developing my first Voice App using <a href="https://developer.amazon.com/alexa-skills-kit" target="_blank" rel="noopener">Alexa Skills Kit</a>. I thought it will be important to share this notes as I felt quite lost at the beginning.</p><blockquote><p>Note: I’ll be using <code>JavaScript</code> and <code>NodeJS</code> as a development language and engine for my first Alexa Custom Skill. </p></blockquote><p><br></p><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><p>When I started looking at the documentation 👨‍💻, I realized there is a completely <em>new vocabulary and concepts</em>. Let’s see some of the concepts I learnt:</p><ul><li><code>Alexa Skill</code>: It is the <strong>basic unit</strong> of Voice App for <strong>Amazon Echo</strong>. So as a <strong>developer</strong> you can <strong>develop and publish</strong> a new Alexa Skill and as a <strong>end user</strong> you can <strong>search and install</strong> that Alexa Skill in your <strong>Amazon Echo</strong>. There are different kind of <a href="https://developer.amazon.com/alexa-skills-kit/learn" target="_blank" rel="noopener">skills</a>. </li><li><code>Alexa SKills Kit</code>: The <strong>Alexa Skills Kit (ASK)</strong> is a collection of <strong>self-service APIs</strong>, <strong>tools</strong>, <strong>documentation</strong>, and <strong>code samples</strong> that makes it fast and easy for you to add skills to Alexa.</li><li><code>Alexa Skills Kit Developer Console</code>: It is the <a href="https://developer.amazon.com/alexa/console/ask" target="_blank" rel="noopener">online tool</a> to <strong>Build</strong>, <strong>Manage</strong>, <strong>Test</strong>, <strong>Launch</strong>, <strong>Measure</strong> and <strong>Delete</strong> your <strong>Alexa Skills</strong>. You have to sign up for an <strong>Amazon Development Account</strong> in order to use it.</li><li><code>Skill Id</code>: Unique identifier for your skill. It is very useful when you need to <em>connect your AWS Lambda function with your Skill</em> through a trigger called <em>Alexa Skill Kit</em>.</li><li><code>Invocation Name</code>: It’s the name used by Alexa to open our app or skill.</li><li><code>Intent</code>: It’s a way to group common and <strong>reusable actions or intentions</strong>. An intent represents an action that fulfills a <strong>user’s spoken request</strong>. Intents can optionally have arguments called slots. Also is the basic unit of development for a custom Alexa Skill. Each custom Intent have to define the intent schema plus the code to handle that intent. There are some <a href="https://developer.amazon.com/docs/custom-skills/standard-built-in-intents.html" target="_blank" rel="noopener">standard built-in intents</a>.</li><li><code>Utterances</code>: A set of likely <strong>spoken phrases</strong> mapped to the <strong>intents</strong>. They are different ways to invoke or activate an intent. For example for <strong>CancelIntent</strong>, we have these utterances: <strong>cancel</strong>, <strong>never mind</strong> and <strong>forget it</strong>.</li><li><code>Slots</code>: A representative list of possible values for a slot. For example, the intent <code>I want to travel to {citySlot}</code> could have different values for <strong>citySlot</strong> like: <strong>Paris</strong>, <strong>Amsterdam</strong>, <strong>Brussels</strong>, and so on.</li><li><code>Interaction Model</code>: It is where you implement the <strong>logic for the skill</strong>, and you also define the <strong>voice interface</strong> through which users interact with the skill. To define the voice interface, you map users’ spoken input to the intents your cloud-based service can handle. It includes also <strong>Invocation Name</strong>, <strong>Intents</strong> and <strong>Slot Types</strong>.</li><li><code>EndPoint</code>: It is the place where we configure the <strong>ARN for AWS Lambda</strong> function that will handle the requests for the user interactions or intents. For example, we can define some custom Intents in <strong>Alexa Skills Kit Developer Console</strong> and then implement the logic for that intent in <strong>AWS Lambda</strong> function. Eventually we have to connect both using the <strong>EnpPoint</strong> feature available in <strong>Alexa Skills Kit Developer Console</strong>.</li><li><code>ASK SDK</code>: The <a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs" target="_blank" rel="noopener">ASK SDK v2 for Node.js</a> makes it easier for you to build highly engaging skills. The most useful methods it provides to handle skill responses are: <code>addRequestHandlers</code>, <code>addRequestInterceptors</code>, <code>addErrorHandlers</code> and <code>lambda</code>. </li><li><code>AWS SDK</code>: It is important to notice the <em>difference</em> between <code>ASK SDK</code> (useful to handle skill requests) and <code>AWS SDK</code> (useful to connect our skill with AWS Services). You can see more samples in the <a href="https://github.com/alexa/alexa-cookbook/tree/master/aws" target="_blank" rel="noopener">Alexa Skill Building Cookbook</a>.</li><li><code>ASK CLI</code>: Alexa Skills Kit Command Line Interface (ASK CLI) could be installed using <a href="https://www.npmjs.com/package/ask-cli" target="_blank" rel="noopener">npm</a>. It exposes some high-level commmands like <code>init</code>, <code>new</code>, <code>deploy</code>, <code>clone</code>, <code>validate</code>, and <code>simulate</code> that we can use in the command line. <a href="https://developer.amazon.com/docs/smapi/ask-cli-command-reference.html" target="_blank" rel="noopener">ASK CLI Command Reference</a>.</li><li><code>AWS CLI</code>: <a href="https://docs.aws.amazon.com/cli/latest/reference/" target="_blank" rel="noopener">Amazon Web Services Command Line Interface</a> could be useful in some Alexa advanced projects that requires other AWS Services to be created.</li></ul><p><br></p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>Once we are more familiar with the main concepts. Before starting to develop a custom skill, there are some requirements: </p><ul><li>Register for an <a href="https://developer.amazon.com?&amp;sc_category=Owned&amp;sc_channel=RD&amp;sc_campaign=Evangelism2018&amp;sc_publisher=github&amp;sc_content=Content&amp;sc_detail=city-guide-nodejs-V2_CLI-1&amp;sc_funnel=Convert&amp;sc_country=WW&amp;sc_medium=Owned_RD_Evangelism2018_github_Content_city-guide-nodejs-V2_CLI-1_Convert_WW_beginnersdevs&amp;sc_segment=beginnersdevs" target="_blank" rel="noopener">Amazon Developer Account</a></li><li>Register for an <a href="https://aws.amazon.com/" target="_blank" rel="noopener">AWS Account</a><blockquote><p>Note you can request for <a href="https://developer.amazon.com/alexa-skills-kit/alexa-aws-credits" target="_blank" rel="noopener">promotional credits on AWS for Alexa</a></p></blockquote></li><li>As we will be using NodeJS:<ul><li>NodeJS</li><li>NPM</li><li>Install and Setup <a href="https://docs.aws.amazon.com/cli/latest/userguide/installing.html" target="_blank" rel="noopener">AWS CLI</a></li><li>Install and Setup <a href="https://developer.amazon.com/docs/smapi/quick-start-alexa-skills-kit-command-line-interface.html?&amp;sc_category=Owned&amp;sc_channel=RD&amp;sc_campaign=Evangelism2018&amp;sc_publisher=github&amp;sc_content=Content&amp;sc_detail=city-guide-nodejs-V2_CLI-1&amp;sc_funnel=Convert&amp;sc_country=WW&amp;sc_medium=Owned_RD_Evangelism2018_github_Content_city-guide-nodejs-V2_CLI-1_Convert_WW_beginnersdevs&amp;sc_segment=beginnersdevs" target="_blank" rel="noopener">ASK CLI</a></li></ul></li></ul><p><br></p><h2 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h2><p>Once you have installed all the requirements on your laptop, let’s see what is the project structure or skeleton required for Alexa Skill. The project structure for Alexa Custom Skill is:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">skill.json   <span class="comment">// skill manifest to define metadata</span></span><br><span class="line"></span><br><span class="line">.ask</span><br><span class="line">  |- config  <span class="comment">// config file for ask cli</span></span><br><span class="line"></span><br><span class="line">lambda</span><br><span class="line">  |- custom</span><br><span class="line">        |- node_modules <span class="comment">// must be uploaded to AWS Lambda function </span></span><br><span class="line">        |- index.js     <span class="comment">// lambda function to define intent handlers</span></span><br><span class="line">        |- package.json <span class="comment">// npm dependencies</span></span><br><span class="line"></span><br><span class="line">models            <span class="comment">// Define Interaction Model for each language. </span></span><br><span class="line">  |- en-US.json     </span><br><span class="line">  |- en-GB.json</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.amazon.com/docs/smapi/skill-manifest.html" target="_blank" rel="noopener">Skill Manifest Schema</a></p><p><a href="https://developer.amazon.com/docs/smapi/interaction-model-schema.html" target="_blank" rel="noopener">Interaction Model Schema</a></p></blockquote><p>As a beginner in the <strong>Voice Apps</strong> world, it is important to <em>note</em> that this is the structure used to define our <strong>Skill metadata</strong>, our <strong>Interaction Model schema</strong> and our <strong>Handlers code</strong>. <strong>It is important to keep that structure like that</strong> because <code>ask-cli</code> will be using it in order to deploy to Alexa Skills Kit Developer Console and AWS Lambda. Further explanation about the files:</p><ul><li><code>skill.json</code>: where skill metadata lives. For example, skill_id or Lambda function ARN. </li><li><code>.ask/config</code>: ask-cli will be required to automate the creation, publication and update for our interaction model or lambda function. This config file is where our ask cli config lives. <strong>Note</strong> that <a href="https://developer.amazon.com/docs/smapi/set-up-credentials-for-an-amazon-web-services-account.html" target="_blank" rel="noopener">authentication config for lambda function could be handled separately</a>. </li><li><code>lambda/custom/*</code>: where our intents handlers code lives. In order to test it we should deploy using ask-cli. We’ll see how later in the post. Here is where we’ll use <code>ask sdk</code> to develop handlers for our intents.</li><li><code>models/*</code>: where our interaction model json definition lives. Whatever we define here as JSON format, we should implement the handlers in the lambda function code.</li></ul><p><br></p><h2 id="Starting-templates-Code-Samples"><a href="#Starting-templates-Code-Samples" class="headerlink" title="Starting templates / Code Samples"></a>Starting templates / Code Samples</h2><p>There are some 🚀 <strong>official boilerplates / code samples</strong> 🚀 to start with. All of them are <code>github</code> projects, so you can clone and start playing with them. I recommend to go through <strong>one of them</strong> and get it <strong>deployed</strong> and tested via your test environment provided by <strong>Alexa Skills Kit Developer Console</strong>: </p><ul><li><a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs#samples" target="_blank" rel="noopener">Amazon Official Code Samples</a></li></ul><blockquote><p><strong>IMPORTANT</strong>: Recently (April 2018), it was published the V2 for Alexa Skill Kit SDK. So, make sure that the code you are using in your sample is pointing to V2 and not V1. </p><p>❌ V1 uses <code>require(&quot;alexa-sdk&quot;)</code></p><p>✅ V2 uses <code>require(&quot;ask-sdk-core&quot;)</code></p></blockquote><p><br></p><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>As part of my <strong>up and running</strong> for my first Alexa Skill, I found some <strong>issues</strong> in the process, I documented some solutions:</p><h3 id="❗-️Problem-1-❗️"><a href="#❗-️Problem-1-❗️" class="headerlink" title="❗ ️Problem 1 ❗️"></a>❗ ️Problem 1 ❗️</h3><p><em>A valid interaction model is required to test your skill there was an internal server error</em></p><blockquote><p>Solution: Check in <strong>Alexa Skills Kit Developer Console</strong> your Skill builder checklist. Everyone of these 4 items should be check in green!<img src="./build-the-model.png" alt="build the model"></p></blockquote><h3 id="❗️-Problem-2-❗️"><a href="#❗️-Problem-2-❗️" class="headerlink" title="❗️ Problem 2 ❗️"></a>❗️ Problem 2 ❗️</h3><p><em>Error parsing the requested content. Please validate the enums in the request, which is a common cause for this exception</em></p><blockquote><p>Solution: <a href="https://forums.developer.amazon.com/questions/165659/error-parsing-the-requested-content-please-validat.html" target="_blank" rel="noopener">https://forums.developer.amazon.com/questions/165659/error-parsing-the-requested-content-please-validat.html</a></p></blockquote><p><br></p><h2 id="Other-Resources"><a href="#Other-Resources" class="headerlink" title="Other Resources"></a>Other Resources</h2><ul><li><a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs" target="_blank" rel="noopener">Alexa SDK for NodeJS (V1)</a>, <a href="https://www.npmjs.com/package/alexa-sdk" target="_blank" rel="noopener">ASK SDK V1 npm</a></li><li><a href="https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs/blob/2.0.x/Readme.md" target="_blank" rel="noopener">Alexa SDK for NodeJS (V2)</a>, <a href="https://www.npmjs.com/package/ask-sdk" target="_blank" rel="noopener">ASK SDK V2 npm</a></li><li><a href="https://github.com/alexa/alexa-cookbook/tree/master/aws" target="_blank" rel="noopener">Alexa Cookbook</a></li></ul><p>I <strong>hope</strong> these notes will help on <strong>clarify little bit the new concepts</strong> on <strong>Voice Apps</strong>. </p><p><strong>Stay tunned</strong> 🤘 as I’ll be publishing more post about <strong>advanced scenarios</strong> and deployments for Alexa Custom Skills!</p>]]></content:encoded>
      
      <comments>https://blog.josequinto.com/2018/04/23/building-voice-app-custom-alexa-skill-node-js/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
